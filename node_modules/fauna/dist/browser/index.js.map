{
  "version": 3,
  "sources": ["../../src/client-configuration.ts", "../../src/errors.ts", "../../src/http-client/fetch-client.ts", "../../src/http-client/node-http2-client.ts", "../../src/http-client/index.ts", "../../src/regex.ts", "../../src/values/date-time.ts", "../../src/values/doc.ts", "../../src/values/set.ts", "../../src/tagged-type.ts", "../../src/query-builder.ts", "../../src/util/package-version.ts", "../../src/util/environment.ts", "../../src/wire-protocol.ts", "../../src/client.ts"],
  "sourcesContent": ["import type { ValueFormat } from \"./wire-protocol\";\n\n/**\n * Configuration for a client. The options provided are used as the\n * default options for each query.\n */\nexport interface ClientConfiguration {\n  /**\n   * Time in milliseconds beyond {@link ClientConfiguration.query_timeout_ms} at\n   * which the client will abort a request if it has not received a response.\n   * The default is 5000 ms, which should account for network latency for most\n   * clients. The value must be greater than zero. The closer to zero the value\n   * is, the more likely the client is to abort the request before the server\n   * can report a legitimate response or error.\n   */\n  client_timeout_buffer_ms?: number;\n\n  /**\n   * The {@link URL} of Fauna to call. See {@link endpoints} for some default options.\n   */\n  endpoint?: URL;\n\n  /**\n   * Determines the encoded format expected for the query `arguments` field, and\n   * the `data` field of a successful response.\n   * @remarks **Note, it is very unlikely you need to change this value from its\n   * default.**\n   * The default format is \"tagged\", which specifies that the driver transmits\n   * type information over the wire. Type information allows the driver and\n   * Fauna to distinguish between types such as int\" and \"long\" which do not\n   * have a standard way of distinguishing in JSON.\n   * Rare use cases can also deal with standard JSON by setting the value to\n   * \"simple\". Note that the types enocodable in standard JSON are a subset of\n   * the types encodable in the default \"tagged\" format.\n   * It is not recommended that users use the \"simple\" format as you will lose\n   * the typing of your data. e.g. a \"Date\" will no longer be recognized by the\n   * Fauna as a \"Date\", but will instead be treated as a string.\n   */\n  format?: ValueFormat;\n\n  /**\n   * Time in milliseconds the client will keep an HTTP2 session open after all\n   * requests are completed. The default is 5000 ms.\n   */\n  http2_session_idle_ms?: number;\n\n  /**\n   * The maximum number of HTTP2 streams to execute in parallel\n   * to Fauna per HTTP2 session.\n   * Only relevant to certain HTTP2 clients.\n   * @remarks\n   * Relevant to clients using the {@link NodeHTTP2Client} provided,\n   * or any custom HTTP2Clients you implement that support this feature.\n   */\n  http2_max_streams?: number;\n\n  /**\n   * When true will keep executing a request even if the page\n   * that fired the request is no longer executing. Only relevant\n   * to underlying clients using the {@link https://fetch.spec.whatwg.org/ | Fetch standard}.\n   * By default set to false.\n   * @remarks\n   * Relevant to clients using the {@link FetchClient} provided,\n   * or any custom HTTP Clients you implement using the Fetch standard.\n   */\n  fetch_keepalive?: boolean;\n\n  /**\n   * A secret for your Fauna DB, used to authorize your queries.\n   * @see https://docs.fauna.com/fauna/current/security/keys\n   */\n  secret?: string;\n\n  // Query options\n\n  /**\n   * The timeout of each query, in milliseconds. This controls the maximum amount of\n   * time Fauna will execute your query before marking it failed. The default is 5000 ms.\n   */\n  query_timeout_ms?: number;\n\n  /**\n   * If true, unconditionally run the query as strictly serialized.\n   * This affects read-only transactions. Transactions which write\n   * will always be strictly serialized.\n   */\n  linearized?: boolean;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/types#long | Fauna longs} to.\n   * Use 'number' to deserialize longs to number. Use 'bigint' to deserialize to bigint. Defaults to 'number'.\n   * Note, for extremely large maginitude numbers Javascript's number will lose precision; as Javascript's\n   * 'number' can only support +/- 2^53-1 whereas Fauna's long is 64 bit. If this is detected, a warning will\n   * be logged to the console and precision loss will occur.\n   * If your application uses extremely large magnitude numbers use 'bigint'.\n   */\n  long_type?: \"number\" | \"bigint\";\n\n  /**\n   * The max number of times to retry the query if contention is encountered.\n   */\n  max_contention_retries?: number;\n\n  /**\n   * Tags provided back via logging and telemetry.\n   */\n  query_tags?: { [key: string]: string };\n\n  /**\n   * A traceparent provided back via logging and telemetry.\n   * Must match format: https://www.w3.org/TR/trace-context/#traceparent-header\n   */\n  traceparent?: string;\n\n  /**\n   * Enable or disable typechecking of the query before evaluation. If no value\n   * is provided, the value of `typechecked` in the database configuration will\n   * be used.\n   */\n  typecheck?: boolean;\n\n  /**\n   * Max attempts for retryable exceptions. Default is 3.\n   */\n  max_attempts?: number;\n\n  /**\n   * Max backoff between retries. Default is 20 seconds.\n   */\n  max_backoff?: number;\n}\n\n/**\n * An extensible interface for a set of Fauna endpoints.\n * @remarks Leverage the `[key: string]: URL;` field to extend to other endpoints.\n */\nexport interface Endpoints {\n  /** Fauna's default endpoint. */\n  default: URL;\n\n  /**\n   * An endpoint for interacting with local instance of Fauna (e.g. one running in a local docker container).\n   */\n  local: URL;\n\n  /**\n   * An alias for local.\n   */\n  localhost: URL;\n\n  /**\n   * Any other endpoint you want your client to support. For example, if you run all requests through a proxy\n   * configure it here. Most clients will not need to leverage this ability.\n   */\n  [key: string]: URL;\n}\n\n/**\n * A extensible set of endpoints for calling Fauna.\n * @remarks Most clients will will not need to extend this set.\n * @example\n * ## To Extend\n * ```typescript\n *   // add to the endpoints constant\n *   endpoints.myProxyEndpoint = new URL(\"https://my.proxy.url\");\n * ```\n */\nexport const endpoints: Endpoints = {\n  default: new URL(\"https://db.fauna.com\"),\n  local: new URL(\"http://localhost:8443\"),\n  localhost: new URL(\"http://localhost:8443\"),\n};\n", "import type {\n  ConstraintFailure,\n  QueryFailure,\n  QueryInfo,\n  QueryValue,\n} from \"./wire-protocol\";\n\n/**\n * A common error base class for all other errors.\n */\nexport abstract class FaunaError extends Error {\n  constructor(...args: any[]) {\n    super(...args);\n  }\n}\n\n/**\n * An error representing a query failure returned by Fauna.\n */\nexport class ServiceError extends FaunaError {\n  /**\n   * The HTTP Status Code of the error.\n   */\n  readonly httpStatus: number;\n  /**\n   * A code for the error. Codes indicate the cause of the error.\n   * It is safe to write programmatic logic against the code. They are\n   * part of the API contract.\n   */\n  readonly code: string;\n  /**\n   * Details about the query sent along with the response\n   */\n  readonly queryInfo?: QueryInfo;\n  /**\n   * A machine readable description of any constraint failures encountered by the query.\n   * Present only if this query encountered constraint failures.\n   */\n  readonly constraint_failures?: Array<ConstraintFailure>;\n\n  constructor(failure: QueryFailure, httpStatus: number) {\n    super(failure.error.message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceError);\n    }\n\n    this.name = \"ServiceError\";\n    this.code = failure.error.code;\n    this.httpStatus = httpStatus;\n\n    const info: QueryInfo = {\n      txn_ts: failure.txn_ts,\n      summary: failure.summary,\n      query_tags: failure.query_tags,\n      stats: failure.stats,\n    };\n    this.queryInfo = info;\n\n    this.constraint_failures = failure.error.constraint_failures;\n  }\n}\n\n/**\n * An error response that is the result of the query failing during execution.\n * QueryRuntimeError's occur when a bug in your query causes an invalid execution\n * to be requested.\n * The 'code' field will vary based on the specific error cause.\n *\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/errors#runtime-errors}\n */\nexport class QueryRuntimeError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 400) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryRuntimeError);\n    }\n    this.name = \"QueryRuntimeError\";\n    // TODO trace, txn_ts, and stats not yet returned for QueryRuntimeError\n    // flip to check for those rather than a specific code.\n  }\n}\n\n/**\n * An error due to a \"compile-time\" check of the query\n * failing.\n *\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/errors#runtime-errors}\n */\nexport class QueryCheckError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 400) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"QueryCheckError\";\n  }\n}\n\n/**\n * An error due to an invalid request to Fauna. Either the request body was not\n * valid JSON or did not conform to the API specification\n *\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/errors#runtime-errors}\n */\nexport class InvalidRequestError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 400) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InvalidRequestError);\n    }\n    this.name = \"InvalidRequestError\";\n  }\n}\n\n/**\n * An error due to calling the FQL `abort` function.\n *\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/errors#runtime-errors}\n */\nexport class AbortError extends ServiceError {\n  /**\n   * The user provided value passed to the originating `abort()` call.\n   * Present only when the query encountered an `abort()` call, which is denoted\n   * by the error code `\"abort\"`\n   */\n  readonly abort: QueryValue;\n\n  constructor(\n    failure: QueryFailure & { error: { abort: QueryValue } },\n    httpStatus: 400\n  ) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryCheckError);\n    }\n    this.name = \"AbortError\";\n    this.abort = failure.error.abort;\n  }\n}\n\n/**\n * AuthenticationError indicates invalid credentials were\n * used.\n */\nexport class AuthenticationError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 401) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthenticationError);\n    }\n    this.name = \"AuthenticationError\";\n  }\n}\n\n/**\n * AuthorizationError indicates the credentials used do not have\n * permission to perform the requested action.\n */\nexport class AuthorizationError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 403) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthorizationError);\n    }\n    this.name = \"AuthorizationError\";\n  }\n}\n\n/**\n * An error due to a contended transaction.\n */\nexport class ContendedTransactionError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 409) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InvalidRequestError);\n    }\n    this.name = \"ContendedTransactionError\";\n  }\n}\n\n/**\n * ThrottlingError indicates some capacity limit was exceeded\n * and thus the request could not be served.\n */\nexport class ThrottlingError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 429) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ThrottlingError);\n    }\n    this.name = \"ThrottlingError\";\n  }\n}\n\n/**\n * A failure due to the timeout being exceeded, but the timeout\n * was set lower than the query's expected processing time.\n * This response is distinguished from a ServiceTimeoutException\n * in that a QueryTimeoutError shows Fauna behaving in an expected\n * manner.\n */\nexport class QueryTimeoutError extends ServiceError {\n  /**\n   * Statistics regarding the query.\n   */\n  readonly stats?: { [key: string]: number };\n\n  constructor(failure: QueryFailure, httpStatus: 440) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, QueryTimeoutError);\n    }\n    this.name = \"QueryTimeoutError\";\n    this.stats = failure.stats;\n  }\n}\n\n/**\n * ServiceInternalError indicates Fauna failed unexpectedly.\n */\nexport class ServiceInternalError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 500) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceInternalError);\n    }\n    this.name = \"ServiceInternalError\";\n  }\n}\n\n/**\n * ServiceTimeoutError indicates Fauna was not available to servce\n * the request before the timeout was reached.\n */\nexport class ServiceTimeoutError extends ServiceError {\n  constructor(failure: QueryFailure, httpStatus: 503) {\n    super(failure, httpStatus);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceTimeoutError);\n    }\n    this.name = \"ServiceTimeoutError\";\n  }\n}\n\n/**\n * An error representing a failure internal to the client, itself.\n * This indicates Fauna was never called - the client failed internally\n * prior to sending the request.\n */\nexport class ClientError extends FaunaError {\n  constructor(message: string, options?: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ClientError);\n    }\n    this.name = \"ClientError\";\n  }\n}\n\n/**\n * An error thrown if you try to call the client after it has been closed.\n */\nexport class ClientClosedError extends FaunaError {\n  constructor(message: string, options?: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ClientClosedError);\n    }\n    this.name = \"ClientClosedError\";\n  }\n}\n\n/**\n * An error representing a failure due to the network.\n * This indicates Fauna was never reached.\n */\nexport class NetworkError extends FaunaError {\n  constructor(message: string, options: { cause: any }) {\n    super(message, options);\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, NetworkError);\n    }\n    this.name = \"NetworkError\";\n  }\n}\n\n/**\n * An error representing a HTTP failure - but one not directly\n * emitted by Fauna.\n */\nexport class ProtocolError extends FaunaError {\n  /**\n   * The HTTP Status Code of the error.\n   */\n  readonly httpStatus: number;\n\n  constructor(error: { message: string; httpStatus: number }) {\n    super(error.message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProtocolError);\n    }\n\n    this.name = \"ProtocolError\";\n    this.httpStatus = error.httpStatus;\n  }\n}\n", "/** following reference needed to include types for experimental fetch API in Node */\n/// <reference lib=\"dom\" />\n\nimport { NetworkError } from \"../errors\";\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n} from \"./http-client\";\n\n/**\n * An implementation for {@link HTTPClient} that uses the native fetch API\n */\nexport class FetchClient implements HTTPClient {\n  #url: string;\n  #keepalive: boolean;\n\n  constructor({ url, fetch_keepalive }: HTTPClientOptions) {\n    this.#url = new URL(\"/query/1\", url).toString();\n    this.#keepalive = fetch_keepalive;\n  }\n\n  /** {@inheritDoc HTTPClient.request} */\n  async request({\n    data,\n    headers: requestHeaders,\n    method,\n    client_timeout_ms,\n  }: HTTPRequest): Promise<HTTPResponse> {\n    const signal =\n      AbortSignal.timeout === undefined\n        ? (() => {\n            const controller = new AbortController();\n            const signal = controller.signal;\n            setTimeout(() => controller.abort(), client_timeout_ms);\n            return signal;\n          })()\n        : AbortSignal.timeout(client_timeout_ms);\n\n    const response = await fetch(this.#url, {\n      method,\n      headers: { ...requestHeaders, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n      signal,\n      keepalive: this.#keepalive,\n    }).catch((error) => {\n      throw new NetworkError(\"The network connection encountered a problem.\", {\n        cause: error,\n      });\n    });\n\n    const status = response.status;\n\n    const responseHeaders: Record<string, string> = {};\n    response.headers.forEach((value, key) => (responseHeaders[key] = value));\n\n    const body = await response.text();\n\n    return {\n      status,\n      body,\n      headers: responseHeaders,\n    };\n  }\n\n  /** {@inheritDoc HTTPClient.close} */\n  close() {\n    // no actions at this time\n  }\n}\n", "let http2: any;\ntry {\n  http2 = require(\"node:http2\");\n} catch (_) {\n  http2 = undefined;\n}\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n} from \"./http-client\";\nimport { NetworkError } from \"../errors\";\n\n// alias http2 types\ntype ClientHttp2Session = any;\ntype ClientHttp2Stream = any;\ntype IncomingHttpHeaders = any;\ntype IncomingHttpStatusHeader = any;\ntype OutgoingHttpHeaders = any;\n\n/**\n * An implementation for {@link HTTPClient} that uses the node http package\n */\nexport class NodeHTTP2Client implements HTTPClient {\n  static #clients: Map<string, NodeHTTP2Client> = new Map();\n\n  #http2_session_idle_ms: number;\n  #http2_max_streams: number;\n  #url: string;\n  #numberOfUsers = 0;\n  #session: ClientHttp2Session | null;\n\n  private constructor({\n    http2_session_idle_ms,\n    url,\n    http2_max_streams,\n  }: HTTPClientOptions) {\n    if (http2 === undefined) {\n      throw new Error(\"Your platform does not support Node's http2 library\");\n    }\n\n    this.#http2_session_idle_ms = http2_session_idle_ms;\n    this.#http2_max_streams = http2_max_streams;\n    this.#url = url;\n    this.#session = null;\n  }\n\n  /**\n   * Gets a {@link NodeHTTP2Client} matching the {@link HTTTPClientOptions}\n   * @param httpClientOptions - the {@link HTTTPClientOptions}\n   * @returns a {@link NodeHTTP2Client} matching the {@link HTTTPClientOptions}\n   */\n  static getClient(httpClientOptions: HTTPClientOptions): NodeHTTP2Client {\n    const clientKey = NodeHTTP2Client.#getClientKey(httpClientOptions);\n    if (!NodeHTTP2Client.#clients.has(clientKey)) {\n      NodeHTTP2Client.#clients.set(\n        clientKey,\n        new NodeHTTP2Client(httpClientOptions)\n      );\n    }\n    // we know that we have a client here\n    const client = NodeHTTP2Client.#clients.get(clientKey) as NodeHTTP2Client;\n    client.#numberOfUsers++;\n    return client;\n  }\n\n  static #getClientKey({ http2_session_idle_ms, url }: HTTPClientOptions) {\n    return `${url}|${http2_session_idle_ms}`;\n  }\n\n  /** {@inheritDoc HTTPClient.request} */\n  async request(req: HTTPRequest): Promise<HTTPResponse> {\n    let retryCount = 0;\n    let memoizedError: any;\n    do {\n      try {\n        return await this.#doRequest(req);\n      } catch (error: any) {\n        // see https://github.com/nodejs/node/pull/42190/files\n        // and https://github.com/nodejs/help/issues/2105\n        //\n        // TLDR; In Node, there is a race condition between handling\n        // GOAWAY and submitting requests - that can cause\n        // clients that safely handle go away to submit\n        // requests after a GOAWAY was received anyway.\n        //\n        // technical explanation: node HTTP2 request gets put\n        // on event queue before it is actually executed. In the iterim,\n        // a GOAWAY can come and cause the request to fail\n        // with a GOAWAY.\n        if (error?.code !== \"ERR_HTTP2_GOAWAY_SESSION\") {\n          // TODO: be more discernable about error types\n          throw new NetworkError(\n            \"The network connection encountered a problem.\",\n            {\n              cause: error,\n            }\n          );\n        }\n        memoizedError = error;\n        retryCount++;\n      }\n    } while (retryCount < 3);\n    throw new NetworkError(\"The network connection encountered a problem.\", {\n      cause: memoizedError,\n    });\n  }\n\n  /** {@inheritDoc HTTPClient.close} */\n  close() {\n    // defend against redundant close calls\n    if (this.isClosed()) {\n      return;\n    }\n    this.#numberOfUsers--;\n    if (this.#numberOfUsers === 0 && this.#session && !this.#session.closed) {\n      this.#session.close();\n    }\n  }\n\n  /**\n   * @returns true if this client has been closed, false otherwise.\n   */\n  isClosed(): boolean {\n    return this.#numberOfUsers === 0;\n  }\n\n  #closeForAll() {\n    this.#numberOfUsers = 0;\n    if (this.#session && !this.#session.closed) {\n      this.#session.close();\n    }\n  }\n\n  #connect() {\n    // create the session if it does not exist or is closed\n    if (!this.#session || this.#session.closed || this.#session.destroyed) {\n      const new_session: ClientHttp2Session = http2\n        .connect(this.#url, {\n          peerMaxConcurrentStreams: this.#http2_max_streams,\n        })\n        .once(\"error\", () => this.#closeForAll())\n        .once(\"goaway\", () => this.#closeForAll());\n\n      new_session.setTimeout(this.#http2_session_idle_ms, () => {\n        this.#closeForAll();\n      });\n\n      this.#session = new_session;\n    }\n    return this.#session;\n  }\n\n  #doRequest({\n    client_timeout_ms,\n    data: requestData,\n    headers: requestHeaders,\n    method,\n  }: HTTPRequest): Promise<HTTPResponse> {\n    return new Promise<HTTPResponse>((resolvePromise, rejectPromise) => {\n      let req: ClientHttp2Stream;\n      const onResponse = (\n        http2ResponseHeaders: IncomingHttpHeaders & IncomingHttpStatusHeader\n      ) => {\n        const status = Number(\n          http2ResponseHeaders[http2.constants.HTTP2_HEADER_STATUS]\n        );\n        let responseData = \"\";\n\n        // append response data to the data string every time we receive new\n        // data chunks in the response\n        req.on(\"data\", (chunk: any) => {\n          responseData += chunk;\n        });\n\n        // Once the response is finished, resolve the promise\n        req.on(\"end\", () => {\n          resolvePromise({\n            status,\n            body: responseData,\n            headers: http2ResponseHeaders,\n          });\n        });\n      };\n\n      try {\n        const httpRequestHeaders: OutgoingHttpHeaders = {\n          ...requestHeaders,\n          [http2.constants.HTTP2_HEADER_PATH]: \"/query/1\",\n          [http2.constants.HTTP2_HEADER_METHOD]: method,\n        };\n\n        const session = this.#connect();\n        req = session\n          .request(httpRequestHeaders)\n          .setEncoding(\"utf8\")\n          .on(\"error\", (error: any) => {\n            rejectPromise(error);\n          })\n          .on(\"response\", onResponse);\n\n        req.write(JSON.stringify(requestData), \"utf8\");\n\n        // req.setTimeout must be called before req.end()\n        req.setTimeout(client_timeout_ms, () => {\n          req.destroy(new Error(`Client timeout`));\n        });\n\n        req.end();\n      } catch (error) {\n        rejectPromise(error);\n      }\n    });\n  }\n}\n", "import { FetchClient } from \"./fetch-client\";\nimport { NodeHTTP2Client } from \"./node-http2-client\";\nimport {\n  HTTPClient,\n  HTTPClientOptions,\n  HTTPRequest,\n  HTTPResponse,\n} from \"./http-client\";\n\nexport const getDefaultHTTPClient = (options: HTTPClientOptions): HTTPClient =>\n  nodeHttp2IsSupported()\n    ? NodeHTTP2Client.getClient(options)\n    : new FetchClient(options);\n\nexport const isHTTPResponse = (res: any): res is HTTPResponse =>\n  res instanceof Object && \"body\" in res && \"headers\" in res && \"status\" in res;\n\nconst nodeHttp2IsSupported = () => {\n  if (\n    typeof process !== \"undefined\" &&\n    process &&\n    process.release?.name === \"node\"\n  ) {\n    try {\n      require(\"node:http2\");\n      return true;\n    } catch (_) {\n      return false;\n    }\n  }\n  return false;\n};\n\nexport { FetchClient, NodeHTTP2Client, HTTPClient, HTTPRequest, HTTPResponse };\n", "// Date and Time expressions\n\nconst yearpart = /(?:\\d{4}|[\\u2212-]\\d{4,}|\\+\\d{5,})/;\nconst monthpart = /(?:0[1-9]|1[0-2])/;\nconst daypart = /(?:0[1-9]|[12]\\d|3[01])/;\nconst hourpart = /(?:[01][0-9]|2[0-3])/;\nconst minsecpart = /(?:[0-5][0-9])/;\nconst decimalpart = /(?:\\.\\d+)/;\n\nconst datesplit = new RegExp(\n  `(${yearpart.source}-(${monthpart.source})-(${daypart.source}))`\n);\n\nconst timesplit = new RegExp(\n  `(${hourpart.source}:${minsecpart.source}:${minsecpart.source}${decimalpart.source}?)`\n);\n\nconst zonesplit = new RegExp(\n  `([zZ]|[+\\u2212-]${hourpart.source}(?::?${minsecpart.source}|:${minsecpart.source}:${minsecpart.source}))`\n);\n\n/**\n * Matches the subset of ISO8601 dates that Fauna can accept. Cannot include any\n * time part\n */\nexport const plaindate = new RegExp(`^${datesplit.source}$`);\n\n/**\n * Matches a valid ISO8601 date and can have anything trailing after.\n */\nexport const startsWithPlaindate = new RegExp(`^${datesplit.source}`);\n\n/**\n * Matches the subset of ISO8601 times that Fauna can accept.\n */\nexport const datetime = new RegExp(\n  `^${datesplit.source}T${timesplit.source}${zonesplit.source}$`\n);\n", "import { ClientError } from \"../errors\";\nimport * as PARSE from \"../regex\";\n\n/**\n * A wrapper around the Fauna `Time` type. It, represents a fixed point in time\n * without regard to calendar or location, e.g. July 20, 1969, at 20:17 UTC.\n * Convert to and from Javascript Date's with the {@link TimeStub.fromDate} and\n * {@link TimeStub.toDate} methods.\n * See remarks for possible precision loss when doing this. If precision loss is\n * a concern consider using a 3rd party datetime library such as luxon.\n *\n * @remarks The Javascript `Date` type most closely resembles a Fauna `Time`,\n * not a Fauna `Date`. However, Fauna stores `Time` values with nanosecond\n * precision, while Javascript `Date` values only have millisecond precision.\n * This TimeStub class preserves precision by storing the original string value\n * and should be used whenever possible to pass `Time` values back to Fauna.\n * Converting to a Javascript date before sending to Fauna could result in loss\n * of precision.\n *\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/builtin_functions/time/time}\n */\nexport class TimeStub {\n  readonly isoString: string;\n\n  /**\n   * @remarks constructor is private to enforce using factory functions\n   */\n  private constructor(isoString: string) {\n    this.isoString = isoString;\n  }\n\n  /**\n   * Creates a new {@link TimeStub} from an ISO date string\n   * @param isoString - An ISO date string.\n   * @returns A new {@link TimeStub}\n   * @throws TypeError if a string is not provided, or RangeError if item\n   * is not a valid date\n   */\n  static from(isoString: string): TimeStub {\n    if (typeof isoString !== \"string\") {\n      throw new TypeError(\n        `Expected string but received ${typeof isoString}: ${isoString}`\n      );\n    }\n    const matches = PARSE.datetime.exec(isoString);\n    if (matches === null) {\n      throw new RangeError(\n        `(regex) Expected an ISO date string but received '${isoString}'`\n      );\n    }\n    // There are some dates that match the regex but are invalid, such as Feb 31.\n    // Javascript does not parse all years that are valid in fauna, so let\n    // Fauna be the final check.\n\n    return new TimeStub(isoString);\n  }\n\n  /**\n   * Creates a new {@link TimeStub} from a Javascript `Date`\n   * @param date - A Javascript `Date`\n   * @returns A new {@link TimeStub}\n   */\n  static fromDate(date: Date): TimeStub {\n    return new TimeStub(date.toISOString());\n  }\n\n  /**\n   * Get a copy of the `TimeStub` converted to a Javascript `Date`. Does not\n   * mutate the existing `TimeStub` value.\n   * @returns A `Date`\n   */\n  toDate(): Date {\n    const date = new Date(this.isoString);\n    if (date.toString() === \"Invalid Date\") {\n      throw new RangeError(\n        \"Fauna Date could not be converted to Javascript Date\"\n      );\n    }\n    return date;\n  }\n\n  /**\n   * Override default string conversion\n   * @returns the string representation of a `TimeStub`\n   */\n  toString(): string {\n    return `TimeStub(\"${this.isoString}\")`;\n  }\n}\n\n/**\n * A wrapper aroud the Fauna `Date` type. It represents a calendar date that is\n * not associated with a particular time or time zone, e.g. August 24th, 2006.\n * Convert to and from Javascript Date's with the {@link DateStub.fromDate} and\n * {@link DateStub.toDate} methods. Javascript Dates are rendered in UTC time\n * before the date part is used.\n * See remarks for possible precision loss when doing this. If precision loss is\n * a concern consider using a 3rd party datetime library such as luxon.\n *\n * @remarks The Javascript `Date` type always has a time associated with it, but\n * Fauna's `Date` type does not. When converting from a Fauna `Date` to a\n * Javascript `Date`, we set time to 00:00:00 UTC. When converting a Javascript\n * `Date` or time string to Fauna `Date`, we convert to UTC first. Care should\n * be taken to specify the desired date, since Javascript `Date`s use local\n * timezone info by default.\n *\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/builtin_functions/date/date}\n */\nexport class DateStub {\n  readonly dateString: string;\n\n  /**\n   * @remarks constructor is private to enforce using factory functions\n   */\n  private constructor(dateString: string) {\n    this.dateString = dateString;\n  }\n\n  /**\n   * Creates a new {@link DateStub} from a date string\n   * @param dateString - A plain date string. The time is converted to UTC\n   * before saving the date.\n   * @returns A new {@link DateStub}\n   * @throws TypeError if a string is not provided, or RangeError if dateString\n   * is not a valid date\n   */\n  static from(dateString: string): DateStub {\n    if (typeof dateString !== \"string\") {\n      throw new TypeError(\n        `Expected string but received ${typeof dateString}: ${dateString}`\n      );\n    }\n    const matches = PARSE.plaindate.exec(dateString);\n    if (matches === null) {\n      throw new RangeError(\n        `Expected a plain date string but received '${dateString}'`\n      );\n    }\n    // There are some dates that match the regex but are invalid, such as Feb 31.\n    // Javascript does not parse all years that are valid in fauna, so let\n    // Fauna be the final check.\n\n    return new DateStub(matches[0]);\n  }\n\n  /**\n   * Creates a new {@link DateStub} from a Javascript `Date`\n   * @param date - A Javascript `Date`. The time is converted to UTC before\n   * saving the date.\n   * @returns A new {@link DateStub}\n   */\n  static fromDate(date: Date): DateStub {\n    const dateString = date.toISOString();\n    const matches = PARSE.startsWithPlaindate.exec(dateString);\n    if (matches === null) {\n      // Our regex should match any possible date that comes out of\n      // `Date.toISOString()`, so we will only get here if the regex is\n      // incorrect. This is a ClientError since it is our fault.\n      throw new ClientError(`Failed to parse date '${date}'`);\n    }\n    return new DateStub(matches[0]);\n  }\n\n  /**\n   * Get a copy of the `TimeStub` converted to a Javascript `Date`. Does not\n   * mutate the existing `TimeStub` value.\n   * @returns A `Date`\n   */\n  toDate(): Date {\n    const date = new Date(this.dateString + \"T00:00:00Z\");\n    if (date.toString() === \"Invalid Date\") {\n      throw new RangeError(\n        \"Fauna Date could not be converted to Javascript Date\"\n      );\n    }\n    return date;\n  }\n\n  /**\n   * Override default string conversion\n   * @returns the string representation of a `DateStub`\n   */\n  toString(): string {\n    return `DateStub(\"${this.dateString}\")`;\n  }\n}\n", "import { QueryValueObject } from \"../wire-protocol\";\nimport { TimeStub } from \"./date-time\";\n\n/**\n * A reference to a Document with an ID. The Document may or may not exist.\n * References to Keys, Tokens, and Documents in user-defined Collections are\n * modeled with a {@link DocumentReference}.\n *\n * The example below retrieves a document reference from a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const userDocumentReference = response.data;\n *\n *  const id = userDocumentReference.id;\n *  id === \"101\"; // returns true\n * ```\n */\nexport class DocumentReference {\n  readonly coll: Module;\n  readonly id: string;\n\n  constructor({ coll, id }: { coll: Module | string; id: string }) {\n    this.id = id;\n\n    if (typeof coll === \"string\") {\n      this.coll = new Module(coll);\n    } else {\n      this.coll = coll;\n    }\n  }\n}\n\n/**\n * A materialized Document with an ID. Keys, Tokens and Documents in\n * user-defined Collections are modeled with a {@link Document}. All top level\n * Document fields are added to a {@link Document} instance, but types cannot be\n * provided. Cast the instance to a {@link DocumentT} to have typesafe access to\n * all top level fields.\n *\n * The example below retrieves a document from a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const userDocument = response.data;\n *\n *  const color = userDocument.color;\n * ```\n *\n * @remarks The {@link Document} class cannot be generic because classes cannot\n * extend generic type arguments.\n */\nexport class Document extends DocumentReference {\n  readonly ts: TimeStub;\n\n  constructor(obj: {\n    coll: Module | string;\n    id: string;\n    ts: TimeStub;\n    [key: string]: any;\n  }) {\n    const { coll, id, ts, ...rest } = obj;\n    super({ coll, id });\n    this.ts = ts;\n    Object.assign(this, rest);\n  }\n\n  toObject(): { coll: Module; id: string; ts: TimeStub } {\n    return { ...this } as { coll: Module; id: string; ts: TimeStub };\n  }\n}\n\n/**\n * A reference to a Document with a name. The Document may or may not exist.\n * References to specific AccessProviders, Collections, Databases, Functions, etc. are\n * modeled with a {@link NamedDocumentReference}.\n *\n * The example below retrieves a NamedDocumentReference for a hypothetical\n * \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.definition\n *  `);\n *  const namedDocumentReference = response.data;\n *\n *  const collectionName = namedDocumentReference.name;\n *  collectionName === \"Users\"; // returns true\n * ```\n */\nexport class NamedDocumentReference {\n  readonly coll: Module;\n  readonly name: string;\n\n  constructor({ coll, name }: { coll: Module | string; name: string }) {\n    this.name = name;\n\n    if (typeof coll === \"string\") {\n      this.coll = new Module(coll);\n    } else {\n      this.coll = coll;\n    }\n  }\n}\n\n/**\n * A materialized Document with a name. Specific AccessProviders, Collections, Databases,\n * Functions, etc. that include user defined data are modeled with a {@link NamedDocument}.\n *\n * The example below retrieves a NamedDocument for a hypothetical\n * \"Users\" collection.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    Users.definition\n *  `);\n *  const userCollectionNamedDocument = response.data;\n *\n *  const indexes = userCollectionNamedDocument.indexes;\n * ```\n *\n * @example\n * All of the named Documents can have optional, user-defined data. The generic\n * class lets you define the shape of that data in a typesafe way\n * ```typescript\n *  type CollectionMetadata = {\n *    metadata: string\n *  }\n *\n *  const response = await client.query<NamedDocument<CollectionMetadata>>(fql`\n *    Users.definition\n *  `);\n *  const userCollection = response.data;\n *\n *  const metadata = userCollection.data.metadata;\n * ```\n */\nexport class NamedDocument<\n  T extends QueryValueObject = Record<string, never>\n> extends NamedDocumentReference {\n  readonly ts: TimeStub;\n  readonly data: T;\n\n  constructor(obj: {\n    coll: Module | string;\n    name: string;\n    ts: TimeStub;\n    data?: T;\n  }) {\n    const { coll, name, ts, data, ...rest } = obj;\n    super({ coll, name });\n    this.ts = ts;\n    this.data = data || ({} as T);\n    Object.assign(this, rest);\n  }\n\n  toObject(): { coll: Module; name: string; ts: TimeStub; data: T } {\n    return { ...this } as { coll: Module; name: string; ts: TimeStub; data: T };\n  }\n}\n\n/**\n * A Fauna module, such as a Collection, Database, Function, Role, etc.\n * Every module is usable directly in your FQL code.\n *\n * The example below shows FQL code that gets all documents for a hypothetical\n * 'Users' collection by creating a Module for user and then calling .all().\n *\n * You can also create modules for databases, functions, roles and other\n * entities in your database.\n *\n * @example\n * ```javascript\n *  const response = await client.query(fql`\n *    ${new Module(\"Users\")}.all()\n *  `);\n *  const allUserDocuments = response.data;\n * ```\n */\nexport class Module {\n  readonly name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n/**\n * A reference to a Document or Named Document that could not be read. The\n * Document may or may not exist in future queries. The cause field specifies\n * the reason the document could not be read, typically because the Document\n * does not exist or due to insufficient privileges.\n *\n * Some read operations, such as the `<Collection>.byId` method may return\n * either a Document or a NullDocument. This example shows how to handle such a\n * result with the driver\n *\n * @example\n * ```typescript\n *  const response = await client.query<Document | NullDocument>(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const maybeUserDocument = response.data;\n *\n *  if (maybeUserDocument instanceof NullDocument) {\n *    // handle NullDocument case\n *    const cause = maybeUserDocument.cause\n *  } else {\n *    // handle Document case\n *    const color = maybeUserDocument.color;\n *  }\n * ```\n */\nexport class NullDocument {\n  readonly ref: DocumentReference | NamedDocumentReference;\n  readonly cause: string;\n\n  constructor(ref: DocumentReference | NamedDocumentReference, cause: string) {\n    this.ref = ref;\n    this.cause = cause;\n  }\n}\n\n/**\n * A Document typed with a user-defined data type. Typescript users can cast\n * instances of {@link Document} to {@link DocumentT} to access user-defined fields with type safety.\n *\n * The example below creates a local type \"User\" that is applied to queries for documents in a\n * hypothetical \"Users\" collection.\n *\n * @example\n * ```typescript\n *  type User = {\n *    color: string\n *  }\n *\n *  const response = await client.query<DocumentT<User>>(fql`\n *    Users.byId(\"101\")\n *  `);\n *  const user = response.data;\n *\n *  const color = user.color;\n * ```\n *\n * @remarks The {@link Document} class cannot be generic because classes cannot\n * extend generic type arguments.\n */\nexport type DocumentT<T extends QueryValueObject> = Document & T;\n", "import { Client } from \"../client\";\nimport { Query, fql } from \"../query-builder\";\nimport { QueryOptions, QueryValue } from \"../wire-protocol\";\n\n/**\n * A materialized view of a Set.\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/types#set}\n */\nexport class Page<T extends QueryValue> {\n  /** A materialized page of data */\n  readonly data: T[];\n  /**\n   * A pagination cursor, used to obtain additional information in the Set.\n   * If `after` is not provided, then `data` must be present and represents the\n   * last Page in the Set.\n   */\n  readonly after?: string;\n\n  constructor({ data, after }: { data: T[]; after?: string }) {\n    this.data = data;\n    this.after = after;\n  }\n}\n\n/**\n * A un-materialized Set. Typically received when a materialized Set contains\n * another set, the EmbeddedSet does not contain any data to avoid potential\n * issues such as self-reference and infinite recursion\n * @see {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/types#set}\n */\nexport class EmbeddedSet {\n  /**\n   * A pagination cursor, used to obtain additional information in the Set.\n   */\n  readonly after: string;\n\n  constructor(after: string) {\n    this.after = after;\n  }\n}\n\n/**\n * A class to provide an iterable API for fetching multiple pages of data, given\n * a Fauna Set\n */\nexport class SetIterator<T extends QueryValue>\n  implements AsyncGenerator<T[], void, unknown>\n{\n  readonly #generator: AsyncGenerator<T[], void, unknown>;\n\n  /**\n   * Constructs a new {@link SetIterator}.\n   *\n   * @remarks Though you can use {@link SetIterator} class directly, it is\n   * most common to create an instance through the {@link Client.paginate} `paginate`\n   * method.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param client - The {@link Client} that will be used to fetch new data on\n   * each iteration\n   * @param initial - An existing fauna Set ({@link Page} or\n   * {@link EmbeddedSet}) or function which returns a promise. If the Promise\n   * resolves to a {@link Page} or {@link EmbeddedSet} then the iterator will\n   * use the client to fetch additional pages of data.\n   * @param options - a {@link QueryOptions} to apply to the queries. Optional.\n   */\n  constructor(\n    client: Client,\n    initial: Page<T> | EmbeddedSet | (() => Promise<T | Page<T> | EmbeddedSet>),\n    options?: QueryOptions\n  ) {\n    options = options ?? {};\n    if (initial instanceof Function) {\n      this.#generator = generateFromThunk(client, initial, options);\n    } else if (initial instanceof Page || initial instanceof EmbeddedSet) {\n      this.#generator = generatePages(client, initial, options);\n    } else {\n      throw new TypeError(\n        `Expected 'Page<T> | EmbeddedSet | (() => Promise<T | Page<T> | EmbeddedSet>)', but received ${JSON.stringify(\n          initial\n        )}`\n      );\n    }\n  }\n\n  /**\n   * Constructs a new {@link SetIterator} from an {@link Query}\n   *\n   * @internal Though you can use {@link SetIterator.fromQuery} directly, it is\n   * intended as a convenience for use in the {@link Client.paginate} method\n   */\n  static fromQuery<T extends QueryValue>(\n    client: Client,\n    query: Query,\n    options?: QueryOptions\n  ): SetIterator<T> {\n    return new SetIterator<T>(\n      client,\n      async () => {\n        const response = await client.query<T | Page<T> | EmbeddedSet>(\n          query,\n          options\n        );\n        return response.data;\n      },\n      options\n    );\n  }\n\n  /**\n   * Constructs a new {@link SetIterator} from an {@link Page} or\n   * {@link EmbeddedSet}\n   *\n   * @internal Though you can use {@link SetIterator.fromPageable} directly, it\n   * is intended as a convenience for use in the {@link Client.paginate} method\n   */\n  static fromPageable<T extends QueryValue>(\n    client: Client,\n    pageable: Page<T> | EmbeddedSet,\n    options?: QueryOptions\n  ): SetIterator<T> {\n    return new SetIterator<T>(client, pageable, options);\n  }\n\n  /**\n   * Constructs a new {@link FlattenedSetIterator} from the current instance\n   *\n   * @returns A new {@link FlattenedSetIterator} from the current instance\n   */\n  flatten(): FlattenedSetIterator<T> {\n    return new FlattenedSetIterator(this);\n  }\n\n  /** Implement {@link AsyncGenerator.next} */\n  async next(): Promise<IteratorResult<T[], void>> {\n    return this.#generator.next();\n  }\n\n  /** Implement {@link AsyncGenerator.return} */\n  async return(): Promise<IteratorResult<T[], void>> {\n    return this.#generator.return();\n  }\n\n  /** Implement {@link AsyncGenerator.throw} */\n  async throw(e: any): Promise<IteratorResult<T[], void>> {\n    return this.#generator.throw(e);\n  }\n\n  /** Implement {@link AsyncGenerator} */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n\n/**\n * A class to provide an iterable API for fetching multiple pages of data, given\n * a Fauna Set. This class takes a {@link SetIterator} and flattens the results\n * to yield the items directly.\n */\nexport class FlattenedSetIterator<T extends QueryValue>\n  implements AsyncGenerator<T, void, unknown>\n{\n  readonly #generator: AsyncGenerator<T, void, unknown>;\n\n  /**\n   * Constructs a new {@link FlattenedSetIterator}.\n   *\n   * @remarks Though you can use {@link FlattenedSetIterator} class directly, it\n   * is most common to create an instance through the\n   * {@link SetIterator.flatten} method.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param setIterator - The {@link SetIterator}\n   */\n  constructor(setIterator: SetIterator<T>) {\n    this.#generator = generateItems(setIterator);\n  }\n\n  /** Implement {@link AsyncGenerator.next} */\n  async next(): Promise<IteratorResult<T, void>> {\n    return this.#generator.next();\n  }\n\n  /** Implement {@link AsyncGenerator.return} */\n  async return(): Promise<IteratorResult<T, void>> {\n    return this.#generator.return();\n  }\n\n  /** Implement {@link AsyncGenerator.throw} */\n  async throw(e: any): Promise<IteratorResult<T, void>> {\n    return this.#generator.throw(e);\n  }\n\n  /** Implement {@link AsyncGenerator} */\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n\n/**\n * Internal async generator function to use with {@link Page} and\n * {@link EmbeddedSet} values\n */\nasync function* generatePages<T extends QueryValue>(\n  client: Client,\n  initial: Page<T> | EmbeddedSet,\n  options: QueryOptions\n): AsyncGenerator<T[], void, unknown> {\n  let currentPage = initial;\n\n  if (currentPage instanceof Page) {\n    yield currentPage.data;\n  }\n\n  while (currentPage.after) {\n    // cursor means there is more data to fetch\n    const query = fql`Set.paginate(${currentPage.after})`;\n    const response = await client.query<Page<T>>(query, options);\n    const nextPage = response.data;\n\n    currentPage = nextPage;\n    yield currentPage.data;\n  }\n}\n\n/**\n * Internal async generator function to use with a function that returns a\n * promise of data. If the promise resolves to a {@link Page} or\n * {@link EmbeddedSet} then continue iterating.\n */\nasync function* generateFromThunk<T extends QueryValue>(\n  client: Client,\n  thunk: () => Promise<T | Page<T> | EmbeddedSet>,\n  options: QueryOptions\n): AsyncGenerator<T[], void, unknown> {\n  const result = await thunk();\n\n  if (result instanceof Page || result instanceof EmbeddedSet) {\n    for await (const page of generatePages(\n      client,\n      result as Page<T> | EmbeddedSet,\n      options\n    )) {\n      yield page;\n    }\n    return;\n  }\n\n  yield [result];\n}\n\n/**\n * Internal async generator function that flattens a {@link SetIterator}\n */\nasync function* generateItems<T extends QueryValue>(\n  setIterator: SetIterator<T>\n) {\n  for await (const page of setIterator) {\n    for (const item of page) {\n      yield item;\n    }\n  }\n}\n", "import { ClientError } from \"./errors\";\nimport {\n  DateStub,\n  Document,\n  DocumentReference,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  TimeStub,\n  Page,\n  NullDocument,\n  EmbeddedSet,\n} from \"./values\";\nimport { QueryValueObject, QueryValue } from \"./wire-protocol\";\n\nexport interface DecodeOptions {\n  long_type: \"number\" | \"bigint\";\n}\n\n/**\n * TaggedType provides the encoding/decoding of the Fauna Tagged Type formatting\n */\nexport class TaggedTypeFormat {\n  /**\n   * Encode the Object to the Tagged Type format for Fauna\n   *\n   * @param obj - Object that will be encoded\n   * @returns Map of result\n   */\n  static encode(obj: any): any {\n    return encode(obj);\n  }\n\n  /**\n   * Decode the JSON string result from Fauna to remove Tagged Type formatting.\n   *\n   * @param input - JSON string result from Fauna\n   * @returns object of result of FQL query\n   */\n  static decode(input: string, decodeOptions: DecodeOptions): any {\n    return JSON.parse(input, (_, value: any) => {\n      if (value == null) return null;\n      if (value[\"@mod\"]) {\n        return new Module(value[\"@mod\"]);\n      } else if (value[\"@doc\"]) {\n        // WIP: The string-based ref is being removed from the API\n        if (typeof value[\"@doc\"] === \"string\") {\n          const [modName, id] = value[\"@doc\"].split(\":\");\n          return new DocumentReference({ coll: modName, id: id });\n        }\n        // if not a docref string, then it is an object.\n        const obj = value[\"@doc\"];\n        if (obj.id) {\n          return new Document(obj);\n        } else {\n          return new NamedDocument(obj);\n        }\n      } else if (value[\"@ref\"]) {\n        const obj = value[\"@ref\"];\n        let ref: DocumentReference | NamedDocumentReference;\n        if (obj.id) {\n          ref = new DocumentReference(obj);\n        } else {\n          ref = new NamedDocumentReference(obj);\n        }\n        if (\"exists\" in obj && obj.exists === false) {\n          return new NullDocument(ref, obj.cause);\n        }\n        return ref;\n      } else if (value[\"@set\"]) {\n        if (typeof value[\"@set\"] === \"string\") {\n          return new EmbeddedSet(value[\"@set\"]);\n        }\n        return new Page(value[\"@set\"]);\n      } else if (value[\"@int\"]) {\n        return Number(value[\"@int\"]);\n      } else if (value[\"@long\"]) {\n        const bigInt = BigInt(value[\"@long\"]);\n        if (decodeOptions.long_type === \"number\") {\n          if (\n            bigInt > Number.MAX_SAFE_INTEGER ||\n            bigInt < Number.MIN_SAFE_INTEGER\n          ) {\n            console.warn(`Value is too large to be represented as a number. \\\nReturning as Number with loss of precision. Use long_type 'bigint' instead.`);\n          }\n          return Number(bigInt);\n        }\n        return bigInt;\n      } else if (value[\"@double\"]) {\n        return Number(value[\"@double\"]);\n      } else if (value[\"@date\"]) {\n        return DateStub.from(value[\"@date\"]);\n      } else if (value[\"@time\"]) {\n        return TimeStub.from(value[\"@time\"]);\n      } else if (value[\"@object\"]) {\n        return value[\"@object\"];\n      }\n\n      return value;\n    });\n  }\n}\n\ntype TaggedDate = { \"@date\": string };\ntype TaggedDouble = { \"@double\": string };\ntype TaggedInt = { \"@int\": string };\ntype TaggedLong = { \"@long\": string };\ntype TaggedMod = { \"@mod\": string };\ntype TaggedObject = { \"@object\": QueryValueObject };\ntype TaggedRef = {\n  \"@ref\": { id: string; coll: TaggedMod } | { name: string; coll: TaggedMod };\n};\n// WIP: core does not accept `@set` tagged values\n// type TaggedSet = { \"@set\": { data: QueryValue[]; after?: string } };\ntype TaggedTime = { \"@time\": string };\n\nexport const LONG_MIN = BigInt(\"-9223372036854775808\");\nexport const LONG_MAX = BigInt(\"9223372036854775807\");\nexport const INT_MIN = -(2 ** 31);\nexport const INT_MAX = 2 ** 31 - 1;\n\nconst encodeMap = {\n  bigint: (value: bigint): TaggedLong | TaggedInt => {\n    if (value < LONG_MIN || value > LONG_MAX) {\n      throw new RangeError(\n        \"BigInt value exceeds max magnitude for a 64-bit Fauna long. Use a 'number' to represent doubles beyond that limit.\"\n      );\n    }\n    if (value >= INT_MIN && value <= INT_MAX) {\n      return { \"@int\": value.toString() };\n    }\n    return {\n      \"@long\": value.toString(),\n    };\n  },\n  number: (value: number): TaggedDouble | TaggedInt | TaggedLong => {\n    if (\n      value === Number.POSITIVE_INFINITY ||\n      value === Number.NEGATIVE_INFINITY\n    ) {\n      throw new RangeError(`Cannot convert ${value} to a Fauna type.`);\n    }\n\n    if (!Number.isInteger(value)) {\n      return { \"@double\": value.toString() };\n    } else {\n      if (value >= INT_MIN && value <= INT_MAX) {\n        return { \"@int\": value.toString() };\n      } else if (Number.isSafeInteger(value)) {\n        return {\n          \"@long\": value.toString(),\n        };\n      }\n      return { \"@double\": value.toString() };\n    }\n  },\n  string: (value: string): string => {\n    return value;\n  },\n  object: (input: QueryValueObject): TaggedObject | QueryValueObject => {\n    let wrapped = false;\n    const _out: QueryValueObject = {};\n\n    for (const k in input) {\n      if (k.startsWith(\"@\")) {\n        wrapped = true;\n      }\n      if (input[k] !== undefined) {\n        _out[k] = encode(input[k]);\n      }\n    }\n    return wrapped ? { \"@object\": _out } : _out;\n  },\n  array: (input: Array<QueryValue>): Array<QueryValue> => {\n    const _out: QueryValue = [];\n    for (const i in input) _out.push(encode(input[i]));\n    return _out;\n  },\n  date: (dateValue: Date): TaggedTime => ({\n    \"@time\": dateValue.toISOString(),\n  }),\n  faunadate: (value: DateStub): TaggedDate => ({ \"@date\": value.dateString }),\n  faunatime: (value: TimeStub): TaggedTime => ({ \"@time\": value.isoString }),\n  module: (value: Module): TaggedMod => ({ \"@mod\": value.name }),\n  documentReference: (value: DocumentReference): TaggedRef => ({\n    \"@ref\": { id: value.id, coll: { \"@mod\": value.coll.name } },\n  }),\n  document: (value: Document): TaggedRef => ({\n    \"@ref\": { id: value.id, coll: { \"@mod\": value.coll.name } },\n  }),\n  namedDocumentReference: (value: NamedDocumentReference): TaggedRef => ({\n    \"@ref\": { name: value.name, coll: { \"@mod\": value.coll.name } },\n  }),\n  namedDocument: (value: NamedDocument): TaggedRef => ({\n    \"@ref\": { name: value.name, coll: { \"@mod\": value.coll.name } },\n  }),\n  // es-lint-disable-next-line @typescript-eslint/no-unused-vars\n  set: (value: Page<QueryValue> | EmbeddedSet) => {\n    throw new ClientError(\n      \"Page could not be encoded. Fauna does not accept encoded Set values, yet. Use Page.data and Page.after as arguments, instead.\"\n    );\n    // TODO: uncomment to encode Pages once core starts accepting `@set` tagged values\n    // if (value.data === undefined) {\n    //   // if a Page has no data, then it must still have an 'after' cursor\n    //   return { \"@set\": value.after };\n    // }\n    // return {\n    //   \"@set\": { data: encodeMap[\"array\"](value.data), after: value.after },\n    // };\n  },\n};\n\nconst encode = (input: QueryValue): QueryValue => {\n  if (input === undefined) {\n    throw new TypeError(\"Passing undefined as a QueryValue is not supported\");\n  }\n  switch (typeof input) {\n    case \"bigint\":\n      return encodeMap[\"bigint\"](input);\n    case \"string\":\n      return encodeMap[\"string\"](input);\n    case \"number\":\n      return encodeMap[\"number\"](input);\n    case \"boolean\":\n      return input;\n    case \"object\":\n      if (input == null) {\n        return null;\n      } else if (Array.isArray(input)) {\n        return encodeMap[\"array\"](input);\n      } else if (input instanceof Date) {\n        return encodeMap[\"date\"](input);\n      } else if (input instanceof DateStub) {\n        return encodeMap[\"faunadate\"](input);\n      } else if (input instanceof TimeStub) {\n        return encodeMap[\"faunatime\"](input);\n      } else if (input instanceof Module) {\n        return encodeMap[\"module\"](input);\n      } else if (input instanceof Document) {\n        // Document extends DocumentReference, so order is important here\n        return encodeMap[\"document\"](input);\n      } else if (input instanceof DocumentReference) {\n        return encodeMap[\"documentReference\"](input);\n      } else if (input instanceof NamedDocument) {\n        // NamedDocument extends NamedDocumentReference, so order is important here\n        return encodeMap[\"namedDocument\"](input);\n      } else if (input instanceof NamedDocumentReference) {\n        return encodeMap[\"namedDocumentReference\"](input);\n      } else if (input instanceof NullDocument) {\n        return encode(input.ref);\n      } else if (input instanceof Page) {\n        return encodeMap[\"set\"](input);\n      } else if (input instanceof EmbeddedSet) {\n        return encodeMap[\"set\"](input);\n      } else {\n        return encodeMap[\"object\"](input);\n      }\n  }\n  // anything here would be unreachable code\n};\n", "import { TaggedTypeFormat } from \"./tagged-type\";\nimport type {\n  QueryValueObject,\n  QueryValue,\n  QueryInterpolation,\n  QueryRequest,\n  QueryOptions,\n} from \"./wire-protocol\";\n\n/**\n * Creates a new Query. Accepts template literal inputs.\n * @param queryFragments - a {@link TemplateStringsArray} that constitute\n *   the strings that are the basis of the query.\n * @param queryArgs - an Array\\<QueryValue | Query\\> that\n *   constitute the arguments to inject between the queryFragments.\n * @throws Error - if you call this method directly (not using template\n *   literals) and pass invalid construction parameters\n * @example\n * ```typescript\n *  const str = \"baz\";\n *  const num = 17;\n *  const innerQuery = fql`${num} + 3)`;\n *  const queryRequestBuilder = fql`${str}.length == ${innerQuery}`;\n * ```\n */\nexport function fql(\n  queryFragments: ReadonlyArray<string>,\n  ...queryArgs: (QueryValue | Query)[]\n): Query {\n  return new Query(queryFragments, ...queryArgs);\n}\n\n/**\n * Internal class.\n * A builder for composing queries using the {@link fql} tagged template\n * function\n */\nexport class Query {\n  readonly #queryFragments: ReadonlyArray<string>;\n  readonly #queryArgs: (QueryValue | Query)[];\n\n  constructor(\n    queryFragments: ReadonlyArray<string>,\n    ...queryArgs: (QueryValue | Query)[]\n  ) {\n    if (\n      queryFragments.length === 0 ||\n      queryFragments.length !== queryArgs.length + 1\n    ) {\n      throw new Error(\"invalid query constructed\");\n    }\n    this.#queryFragments = queryFragments;\n    this.#queryArgs = queryArgs;\n  }\n\n  /**\n   * Converts this Query to a {@link QueryRequest} you can send\n   * to Fauna.\n   * @param requestHeaders - optional {@link QueryOptions} to include\n   *   in the request (and thus override the defaults in your {@link ClientConfiguration}.\n   *   If not passed in, no headers will be set as overrides.\n   * @returns a {@link QueryRequest}.\n   * @example\n   * ```typescript\n   *  const num = 8;\n   *  const queryBuilder = fql`'foo'.length == ${num}`;\n   *  const queryRequest = queryBuilder.toQuery();\n   *  // produces:\n   *  { query: { fql: [\"'foo'.length == \", { value: { \"@int\": \"8\" } }, \"\"] }}\n   * ```\n   */\n  toQuery(requestHeaders: QueryOptions = {}): QueryRequest {\n    return { ...this.#render(requestHeaders), ...requestHeaders };\n  }\n\n  #render(requestHeaders: QueryOptions): QueryRequest {\n    if (this.#queryFragments.length === 1) {\n      return { query: { fql: [this.#queryFragments[0]] }, arguments: {} };\n    }\n\n    let resultArgs: QueryValueObject = {};\n    const renderedFragments: (string | QueryInterpolation)[] =\n      this.#queryFragments.flatMap((fragment, i) => {\n        // There will always be one more fragment than there are arguments\n        if (i === this.#queryFragments.length - 1) {\n          return fragment === \"\" ? [] : [fragment];\n        }\n\n        const arg = this.#queryArgs[i];\n        let subQuery: string | QueryInterpolation;\n        if (arg instanceof Query) {\n          const request = arg.toQuery(requestHeaders);\n          subQuery = request.query;\n          resultArgs = { ...resultArgs, ...request.arguments };\n        } else {\n          // arguments in the template format must always be encoded, regardless\n          // of the \"x-format\" request header\n          // TODO: catch and rethrow Errors, indicating bad user input\n          subQuery = { value: TaggedTypeFormat.encode(arg) };\n        }\n\n        return [fragment, subQuery].filter((x) => x !== \"\");\n      });\n\n    return {\n      query: { fql: renderedFragments },\n      arguments: resultArgs,\n    };\n  }\n}\n", "//THIS FILE IS AUTOGENERATED. DO NOT EDIT. SEE .husky/pre-commit\n\n/** The current package version. */\nexport const packageVersion = \"1.3.1\";\n", "import { packageVersion } from \"./package-version\";\n\nlet os: any;\ntry {\n  os = require(\"node:os\");\n} catch (_) {\n  os = undefined;\n}\n\n/**\n * Function to put all of the environment details together.\n * @internal\n */\nexport const getDriverEnv = (): string => {\n  const driverEnv = {\n    driver: [\"javascript\", packageVersion].join(\"-\"),\n    env: \"unknown\",\n    os: \"unknown\",\n    runtime: \"unknown\",\n  };\n\n  try {\n    /**\n     * Determine if we're executing in a Node environment\n     */\n    const isNode =\n      typeof window === \"undefined\" &&\n      typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n\n    /**\n     * Determine if we're executing in a Node environment\n     */\n    const isBrowser =\n      typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n    /**\n     * Determine if we're executing in a Service Worker environment\n     */\n    const isServiceWorker =\n      typeof self === \"object\" &&\n      self.constructor &&\n      self.constructor.name === \"DedicatedWorkerGlobalScope\";\n\n    /**\n     * Determine if we're executing in Vercel's Edge Runtime\n     * @see {@link https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime#check-if-you're-running-on-the-edge-runtime}\n     */\n    // @ts-expect-error Cannot find name 'EdgeRuntime'\n    const isVercelEdgeRuntime = typeof EdgeRuntime !== \"string\";\n\n    if (isNode) {\n      driverEnv.runtime = [\"nodejs\", process.version].join(\"-\");\n      driverEnv.env = getNodeRuntimeEnv();\n      driverEnv.os = [os.platform(), os.release()].join(\"-\");\n    } else if (isServiceWorker) {\n      driverEnv.runtime = getBrowserDetails(navigator);\n      driverEnv.env = \"Service Worker\";\n      driverEnv.os = getBrowserOsDetails(navigator);\n    } else if (isBrowser) {\n      driverEnv.runtime = getBrowserDetails(navigator);\n      driverEnv.env = \"browser\";\n      driverEnv.os = getBrowserOsDetails(navigator);\n    } else if (isVercelEdgeRuntime) {\n      driverEnv.runtime = \"Vercel Edge Runtime\";\n      driverEnv.env = \"edge\";\n    }\n  } catch (e) {\n    // ignore errors trying to report on user environment\n  }\n\n  return (\n    Object.entries(driverEnv)\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      .filter(([_, val]) => val !== \"unknown\")\n      .map((entry: [string, string]) => entry.join(\"=\"))\n      .join(\"; \")\n  );\n};\n\n/**\n * Get browser environment details\n */\nconst getBrowserDetails = (navigator: Navigator | WorkerNavigator): string => {\n  let browser: string = navigator.appName;\n  let browserVersion = \"\" + parseFloat(navigator.appVersion);\n  let nameOffset, verOffset, ix;\n\n  // Opera\n  if ((verOffset = navigator.userAgent.indexOf(\"Opera\")) != -1) {\n    browser = \"Opera\";\n    browserVersion = navigator.userAgent.substring(verOffset + 6);\n    if ((verOffset = navigator.userAgent.indexOf(\"Version\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8);\n    }\n  }\n  // MSIE\n  else if ((verOffset = navigator.userAgent.indexOf(\"MSIE\")) != -1) {\n    browser = \"Microsoft Internet Explorer\";\n    browserVersion = navigator.userAgent.substring(verOffset + 5);\n  }\n\n  //IE 11 no longer identifies itself as MS IE, so trap it\n  //http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  else if (\n    browser == \"Netscape\" &&\n    navigator.userAgent.indexOf(\"Trident/\") != -1\n  ) {\n    browser = \"Microsoft Internet Explorer\";\n    browserVersion = navigator.userAgent.substring(verOffset + 5);\n    if ((verOffset = navigator.userAgent.indexOf(\"rv:\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 3);\n    }\n  }\n\n  // Chrome\n  else if ((verOffset = navigator.userAgent.indexOf(\"Chrome\")) != -1) {\n    browser = \"Chrome\";\n    browserVersion = navigator.userAgent.substring(verOffset + 7);\n  }\n  // Safari\n  else if ((verOffset = navigator.userAgent.indexOf(\"Safari\")) != -1) {\n    browser = \"Safari\";\n    browserVersion = navigator.userAgent.substring(verOffset + 7);\n    if ((verOffset = navigator.userAgent.indexOf(\"Version\")) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8);\n    }\n\n    // Chrome on iPad identifies itself as Safari. Actual results do not match what Google claims\n    //  at: https://developers.google.com/chrome/mobile/docs/user-agent?hl=ja\n    //  No mention of chrome in the user agent string. However it does mention CriOS, which presumably\n    //  can be keyed on to detect it.\n    if (navigator.userAgent.indexOf(\"CriOS\") != -1) {\n      //Chrome on iPad spoofing Safari...correct it.\n      browser = \"Chrome\";\n      //Don't believe there is a way to grab the accurate version number, so leaving that for now.\n    }\n  }\n  // Firefox\n  else if ((verOffset = navigator.userAgent.indexOf(\"Firefox\")) != -1) {\n    browser = \"Firefox\";\n    browserVersion = navigator.userAgent.substring(verOffset + 8);\n  }\n  // Other browsers\n  else if (\n    (nameOffset = navigator.userAgent.lastIndexOf(\" \") + 1) <\n    (verOffset = navigator.userAgent.lastIndexOf(\"/\"))\n  ) {\n    browser = navigator.userAgent.substring(nameOffset, verOffset);\n    browserVersion = navigator.userAgent.substring(verOffset + 1);\n    if (browser.toLowerCase() == browser.toUpperCase()) {\n      browser = navigator.appName;\n    }\n  }\n  // trim the browser version string\n  if ((ix = browserVersion.indexOf(\";\")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n  if ((ix = browserVersion.indexOf(\" \")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n  if ((ix = browserVersion.indexOf(\")\")) != -1)\n    browserVersion = browserVersion.substring(0, ix);\n\n  return [browser, browserVersion].join(\"-\");\n};\n\n/**\n * Get OS details for the browser\n */\nconst getBrowserOsDetails = (\n  navigator: Navigator | WorkerNavigator\n): string => {\n  let os = \"unknown\";\n  const clientStrings = [\n    { s: \"Windows 10\", r: /(Windows 10.0|Windows NT 10.0)/ },\n    { s: \"Windows 8.1\", r: /(Windows 8.1|Windows NT 6.3)/ },\n    { s: \"Windows 8\", r: /(Windows 8|Windows NT 6.2)/ },\n    { s: \"Windows 7\", r: /(Windows 7|Windows NT 6.1)/ },\n    { s: \"Windows Vista\", r: /Windows NT 6.0/ },\n    { s: \"Windows Server 2003\", r: /Windows NT 5.2/ },\n    { s: \"Windows XP\", r: /(Windows NT 5.1|Windows XP)/ },\n    { s: \"Windows 2000\", r: /(Windows NT 5.0|Windows 2000)/ },\n    { s: \"Windows ME\", r: /(Win 9x 4.90|Windows ME)/ },\n    { s: \"Windows 98\", r: /(Windows 98|Win98)/ },\n    { s: \"Windows 95\", r: /(Windows 95|Win95|Windows_95)/ },\n    { s: \"Windows NT 4.0\", r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/ },\n    { s: \"Windows CE\", r: /Windows CE/ },\n    { s: \"Windows 3.11\", r: /Win16/ },\n    { s: \"Android\", r: /Android/ },\n    { s: \"Open BSD\", r: /OpenBSD/ },\n    { s: \"Sun OS\", r: /SunOS/ },\n    { s: \"Chrome OS\", r: /CrOS/ },\n    { s: \"Linux\", r: /(Linux|X11(?!.*CrOS))/ },\n    { s: \"iOS\", r: /(iPhone|iPad|iPod)/ },\n    { s: \"Mac OS X\", r: /Mac OS X/ },\n    { s: \"Mac OS\", r: /(Mac OS|MacPPC|MacIntel|Mac_PowerPC|Macintosh)/ },\n    { s: \"QNX\", r: /QNX/ },\n    { s: \"UNIX\", r: /UNIX/ },\n    { s: \"BeOS\", r: /BeOS/ },\n    { s: \"OS/2\", r: /OS\\/2/ },\n    {\n      s: \"Search Bot\",\n      r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/,\n    },\n  ];\n  for (const id in clientStrings) {\n    const cs = clientStrings[id];\n    if (cs.r.test(navigator.userAgent)) {\n      os = cs.s;\n      break;\n    }\n  }\n\n  let osVersion: string | undefined = \"unknown\";\n\n  if (/Windows/.test(os)) {\n    osVersion;\n    const matches = /Windows (.*)/.exec(os);\n    if (matches) {\n      osVersion = matches[1];\n    }\n    os = \"Windows\";\n  }\n\n  switch (os) {\n    case \"Mac OS\":\n    case \"Mac OS X\":\n    case \"Android\": {\n      const matches =\n        /(?:Android|Mac OS|Mac OS X|MacPPC|MacIntel|Mac_PowerPC|Macintosh) ([._\\d]+)/.exec(\n          navigator.userAgent\n        );\n      if (matches) {\n        osVersion = matches[1];\n      }\n      break;\n    }\n\n    case \"iOS\": {\n      const matches = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion);\n      if (matches) {\n        osVersion = matches[1] + \".\" + matches[2] + \".\" + (matches[3] ?? 0);\n      }\n      break;\n    }\n  }\n  return [os, osVersion].join(\"-\");\n};\n\nconst crossGlobal =\n  typeof window !== \"undefined\"\n    ? window\n    : typeof globalThis !== \"undefined\"\n    ? globalThis\n    : typeof global !== \"undefined\"\n    ? global\n    : self;\n\n/**\n * Get node environment details\n */\nconst getNodeRuntimeEnv = (): string => {\n  // return early if process variables are not available\n  if (\n    !(\n      typeof process !== \"undefined\" &&\n      process &&\n      process.env &&\n      typeof process.env === \"object\"\n    )\n  ) {\n    return \"unknown\";\n  }\n\n  const runtimeEnvs = [\n    {\n      name: \"Netlify\",\n      check: function (): boolean {\n        return !!process.env[\"NETLIFY_IMAGES_CDN_DOMAIN\"];\n      },\n    },\n    {\n      name: \"Vercel\",\n      check: function (): boolean {\n        return !!process.env[\"VERCEL\"];\n      },\n    },\n    {\n      name: \"Heroku\",\n      check: function (): boolean {\n        return (\n          !!process.env[\"PATH\"] && process.env.PATH.indexOf(\".heroku\") !== -1\n        );\n      },\n    },\n    {\n      name: \"AWS Lambda\",\n      check: function (): boolean {\n        return !!process.env[\"AWS_LAMBDA_FUNCTION_VERSION\"];\n      },\n    },\n    {\n      name: \"GCP Cloud Functions\",\n      check: function (): boolean {\n        return !!process.env[\"_\"] && process.env._.indexOf(\"google\") !== -1;\n      },\n    },\n    {\n      name: \"GCP Compute Instances\",\n      check: function (): boolean {\n        return !!process.env[\"GOOGLE_CLOUD_PROJECT\"];\n      },\n    },\n    {\n      name: \"Azure Cloud Functions\",\n      check: function (): boolean {\n        return !!process.env[\"WEBSITE_FUNCTIONS_AZUREMONITOR_CATEGORIES\"];\n      },\n    },\n    {\n      name: \"Azure Compute\",\n      check: function (): boolean {\n        return (\n          !!process.env[\"ORYX_ENV_TYPE\"] &&\n          !!process.env[\"WEBSITE_INSTANCE_ID\"] &&\n          process.env.ORYX_ENV_TYPE === \"AppService\"\n        );\n      },\n    },\n    {\n      name: \"Mongo Stitch\",\n      check: function (): boolean {\n        // @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.ts(7017)\n        return typeof crossGlobal?.StitchError === \"function\";\n      },\n    },\n    {\n      name: \"Render\",\n      check: function (): boolean {\n        return !!process.env[\"RENDER_SERVICE_ID\"];\n      },\n    },\n    {\n      name: \"Begin\",\n      check: function (): boolean {\n        return !!process.env[\"BEGIN_DATA_SCOPE_ID\"];\n      },\n    },\n  ];\n  const detectedEnv = runtimeEnvs.find((env) => env.check());\n\n  return detectedEnv ? detectedEnv.name : \"unknown\";\n};\n", "// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { fql } from \"./query-builder\";\nimport {\n  DateStub,\n  Document,\n  DocumentReference,\n  EmbeddedSet,\n  Module,\n  NamedDocument,\n  NamedDocumentReference,\n  NullDocument,\n  Page,\n  TimeStub,\n} from \"./values\";\n\n/**\n * A request to make to Fauna.\n */\nexport interface QueryRequest {\n  /** The query */\n  query: string | QueryInterpolation;\n\n  /** Optional arguments. Variables in the query will be initialized to the\n   * value associated with an argument key.\n   */\n  arguments?: QueryValueObject;\n}\n\n/**\n * Options for queries. Each query can be made with different options. Settings here\n * take precedence over those in {@link ClientConfiguration}.\n */\nexport interface QueryOptions {\n  /** Optional arguments. Variables in the query will be initialized to the\n   * value associated with an argument key.\n   */\n  arguments?: QueryValueObject;\n\n  /**\n   * Determines the encoded format expected for the query `arguments` field, and\n   * the `data` field of a successful response.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  format?: ValueFormat;\n\n  /**\n   * If true, unconditionally run the query as strictly serialized.\n   * This affects read-only transactions. Transactions which write\n   * will always be strictly serialized.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  linearized?: boolean;\n\n  /**\n   * Controls what Javascript type to deserialize {@link https://fqlx-beta--fauna-docs.netlify.app/fqlx/beta/reference/language/types#long | Fauna longs} to.\n   * Use 'number' to deserialize longs to number. Use 'bigint' to deserialize to bigint. Defaults to 'number'.\n   * Note, for extremely large maginitude numbers Javascript's number will lose precision; as Javascript's\n   * 'number' can only support +/- 2^53-1 whereas Fauna's long is 64 bit. If this is detected, a warning will\n   * be logged to the console and precision loss will occur.\n   * If your application uses extremely large magnitude numbers use 'bigint'.\n   */\n  long_type?: \"number\" | \"bigint\";\n\n  /**\n   * The max number of times to retry the query if contention is encountered.\n   *Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  max_contention_retries?: number;\n\n  /**\n   * Tags provided back via logging and telemetry.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  query_tags?: Record<string, string>;\n\n  /**\n   * The timeout to use in this query in milliseconds.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  query_timeout_ms?: number;\n\n  /**\n   * A traceparent provided back via logging and telemetry.\n   * Must match format: https://www.w3.org/TR/trace-context/#traceparent-header\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  traceparent?: string;\n\n  /**\n   * Enable or disable typechecking of the query before evaluation. If no value\n   * is provided, the value of `typechecked` in the database configuration will\n   * be used.\n   * Overrides the optional setting on the {@link ClientConfiguration}.\n   */\n  typecheck?: boolean;\n\n  /**\n   * Secret to use instead of the client's secret.\n   */\n  secret?: string;\n}\n\n/**\n * tagged declares that type information is transmitted and received by the driver.\n * \"simple\" indicates it is not - pure JSON is used.\n * \"decorated\" will cause the service output to be shown in FQL syntax that could\n * hypothetically be used to query Fauna. This is intended to support CLI and\n * REPL like tools.\n * @example\n * ```typescript\n * // example of decorated output\n * { time: Time(\"2012-01-01T00:00:00Z\") }\n * ```\n */\nexport declare type ValueFormat = \"simple\" | \"tagged\" | \"decorated\";\n\nexport type QueryStats = {\n  /** The amount of Transactional Compute Ops consumed by the query. */\n  compute_ops: number;\n  /** The amount of Transactional Read Ops consumed by the query. */\n  read_ops: number;\n  /** The amount of Transactional Write Ops consumed by the query. */\n  write_ops: number;\n  /** The query run time in milliseconds. */\n  query_time_ms: number;\n  /** The amount of data read from storage, in bytes. */\n  storage_bytes_read: number;\n  /** The amount of data written to storage, in bytes. */\n  storage_bytes_write: number;\n  /** The number of times the transaction was retried due to write contention. */\n  contention_retries: number;\n  /** The number query attempts made due to retryable errors. */\n  attempts: number;\n};\n\nexport type QueryInfo = {\n  /** The last transaction timestamp of the query. A Unix epoch in microseconds. */\n  txn_ts?: number;\n  /** The schema version that was used for the query execution. */\n  schema_version?: number;\n  /** A readable summary of any warnings or logs emitted by the query. */\n  summary?: string;\n  /** The value of the x-query-tags header, if it was provided. */\n  query_tags?: Record<string, string>;\n  /** Stats on query performance and cost */\n  stats?: QueryStats;\n};\n\nexport type QuerySuccess<T> = QueryInfo & {\n  /**\n   * The result of the query. The data is any valid JSON value.\n   * @remarks\n   * data is type parameterized so that you can treat it as a\n   * certain type if you are using typescript.\n   */\n  data: T;\n  /** The query's inferred static result type. */\n  static_type?: string;\n};\n\n/**\n * A failed query response. Integrations which only want to report a human\n * readable version of the failure can simply print out the \"summary\" field.\n */\nexport type QueryFailure = QueryInfo & {\n  /**\n   * The result of the query resulting in\n   */\n  error: {\n    /** A predefined code which indicates the type of error. See XXX for a list of error codes. */\n    code: string;\n    /** A short, human readable description of the error */\n    message: string;\n    /**\n     * A machine readable description of any constraint failures encountered by the query.\n     * Present only if this query encountered constraint failures.\n     */\n    constraint_failures?: Array<ConstraintFailure>;\n    /**\n     * The user provided value passed to the originating `abort()` call.\n     * Present only when the query encountered an `abort()` call, which is\n     * denoted by the error code `\"abort\"`\n     */\n    abort?: QueryValue;\n  };\n};\n\n/**\n * A constraint failure triggered by a query.\n */\nexport type ConstraintFailure = {\n  /** Description of the constraint failure */\n  message: string;\n  /** Name of the failed constraint */\n  name?: string;\n  /** Path into the write input data to which the failure applies */\n  paths?: Array<number | string>;\n};\n\nexport type QueryResponse<T> = QuerySuccess<T> | QueryFailure;\n\nexport const isQuerySuccess = (res: any): res is QuerySuccess<any> =>\n  res instanceof Object && \"data\" in res;\n\nexport const isQueryFailure = (res: any): res is QueryFailure =>\n  res instanceof Object &&\n  \"error\" in res &&\n  res.error instanceof Object &&\n  \"code\" in res.error &&\n  \"message\" in res.error;\n\nexport const isQueryResponse = (res: any): res is QueryResponse<any> =>\n  isQueryResponse(res) || isQueryFailure(res);\n\n/**\n * A piece of an interpolated query. Interpolated queries can be safely composed\n * together without concern of query string injection.\n * @see {@link ValueFragment} and {@link FQLFragment} for additional\n * information\n */\nexport type QueryInterpolation = FQLFragment | ValueFragment;\n\n/**\n * A piece of an interpolated query that represents an actual value. Arguments\n * are passed to fauna using ValueFragments so that query string injection is\n * not possible.\n * @remarks A ValueFragment is created by this driver when a literal value or\n * object is provided as an argument to the {@link fql} tagged template\n * function.\n *\n * ValueFragments must always be encoded with tags, regardless of the \"x-format\"\n * request header sent.\n * @example\n * ```typescript\n *  const num = 17;\n *  const query = fql`${num} + 3)`;\n *  // produces\n *  { fql: [{ value: { \"@int\": \"17\" } }, \" + 3\"] }\n * ```\n */\nexport type ValueFragment = { value: QueryValue };\n\n/**\n * A piece of an interpolated query. Interpolated Queries can be safely composed\n * together without concern of query string injection.\n * @remarks A FQLFragment is created when calling the {@link fql} tagged\n * template function and can be passed as an argument to other Querys.\n * @example\n * ```typescript\n *  const num = 17;\n *  const query1 = fql`${num} + 3)`;\n *  const query2 = fql`5 + ${query1})`;\n *  // produces\n *  { fql: [\"5 + \", { fql: [{ value: { \"@int\": \"17\" } }, \" + 3\"] }] }\n * ```\n */\nexport type FQLFragment = { fql: (string | QueryInterpolation)[] };\n\n/**\n * A source span indicating a segment of FQL.\n */\nexport interface Span {\n  /**\n   * A string identifier of the FQL source. For example, if performing\n   * a raw query against the API this would be *query*.\n   */\n  src: string;\n  /**\n   * The span's starting index within the src, inclusive.\n   */\n  start: number;\n  /**\n   * The span's ending index within the src, inclusive.\n   */\n  end: number;\n  /**\n   * The name of the enclosing function, if applicable.\n   */\n  function: string;\n}\n\n/**\n * A QueryValueObject is a plain javascript object where\n * each value is a QueryValue.\n * i.e. these objects can be set as values\n * in the {@link fql} query creation function and can be\n * returned in {@link QuerySuccess}.\n */\nexport type QueryValueObject = {\n  [key: string]: QueryValue;\n};\n\n/**\n * A QueryValue can be sent as a value in a query,\n * and received from query output.\n * i.e. these are the types you can set as values\n * in the {@link fql} query creation function and can be\n * returned in {@link QuerySuccess}.\n */\nexport type QueryValue =\n  // plain javascript values\n  | null\n  | string\n  | number\n  | bigint\n  | boolean\n  | QueryValueObject\n  | Array<QueryValue>\n  // client-provided classes\n  | DateStub\n  | TimeStub\n  | Module\n  | Document\n  | DocumentReference\n  | NamedDocument\n  | NamedDocumentReference\n  | NullDocument\n  | Page<QueryValue>\n  | EmbeddedSet;\n", "import { ClientConfiguration, endpoints } from \"./client-configuration\";\nimport {\n  AuthenticationError,\n  AuthorizationError,\n  ClientClosedError,\n  ClientError,\n  NetworkError,\n  ProtocolError,\n  AbortError,\n  QueryCheckError,\n  QueryRuntimeError,\n  QueryTimeoutError,\n  ServiceError,\n  ServiceInternalError,\n  ServiceTimeoutError,\n  ThrottlingError,\n  ContendedTransactionError,\n  InvalidRequestError,\n} from \"./errors\";\nimport {\n  getDefaultHTTPClient,\n  isHTTPResponse,\n  type HTTPClient,\n} from \"./http-client\";\nimport { Query } from \"./query-builder\";\nimport { TaggedTypeFormat } from \"./tagged-type\";\nimport { getDriverEnv } from \"./util/environment\";\nimport { EmbeddedSet, Page, SetIterator } from \"./values\";\nimport {\n  isQueryFailure,\n  isQuerySuccess,\n  QueryInterpolation,\n  type QueryFailure,\n  type QueryOptions,\n  type QuerySuccess,\n  type QueryValue,\n} from \"./wire-protocol\";\n\ntype RequiredClientConfig = ClientConfiguration &\n  Required<\n    Pick<\n      ClientConfiguration,\n      | \"client_timeout_buffer_ms\"\n      | \"endpoint\"\n      | \"fetch_keepalive\"\n      | \"http2_max_streams\"\n      | \"http2_session_idle_ms\"\n      | \"secret\"\n      // required default query options\n      | \"format\"\n      | \"long_type\"\n      | \"query_timeout_ms\"\n      | \"max_attempts\"\n      | \"max_backoff\"\n    >\n  >;\n\nconst DEFAULT_CLIENT_CONFIG: Omit<\n  ClientConfiguration & RequiredClientConfig,\n  \"secret\" | \"endpoint\"\n> = {\n  client_timeout_buffer_ms: 5000,\n  format: \"tagged\",\n  http2_session_idle_ms: 5000,\n  http2_max_streams: 100,\n  long_type: \"number\",\n  fetch_keepalive: false,\n  query_timeout_ms: 5000,\n  max_attempts: 3,\n  max_backoff: 20,\n};\n\n/**\n * Client for calling Fauna.\n */\nexport class Client {\n  /** A static copy of the driver env header to send with each request */\n  static readonly #driverEnvHeader = getDriverEnv();\n\n  /** The {@link ClientConfiguration} */\n  readonly #clientConfiguration: RequiredClientConfig;\n  /** The underlying {@link HTTPClient} client. */\n  readonly #httpClient: HTTPClient;\n  /** The last transaction timestamp this client has seen */\n  #lastTxnTs?: number;\n  /** true if this client is closed false otherwise */\n  #isClosed = false;\n\n  /**\n   * Constructs a new {@link Client}.\n   * @param clientConfiguration - the {@link ClientConfiguration} to apply. Defaults to recommended ClientConfiguraiton.\n   * @param httpClient - The underlying {@link HTTPClient} that will execute the actual HTTP calls. Defaults to recommended HTTPClient.\n   * @example\n   * ```typescript\n   *  const myClient = new Client(\n   *   {\n   *     endpoint: endpoints.cloud,\n   *     secret: \"foo\",\n   *     query_timeout_ms: 60_000,\n   *   }\n   * );\n   * ```\n   */\n  constructor(\n    clientConfiguration?: ClientConfiguration,\n    httpClient?: HTTPClient\n  ) {\n    this.#clientConfiguration = {\n      ...DEFAULT_CLIENT_CONFIG,\n      ...clientConfiguration,\n      secret: this.#getSecret(clientConfiguration),\n      endpoint: this.#getEndpoint(clientConfiguration),\n    };\n\n    this.#validateConfiguration();\n\n    if (!httpClient) {\n      this.#httpClient = getDefaultHTTPClient({\n        url: this.#clientConfiguration.endpoint.toString(),\n        http2_session_idle_ms: this.#clientConfiguration.http2_session_idle_ms,\n        http2_max_streams: this.#clientConfiguration.http2_max_streams,\n        fetch_keepalive: this.#clientConfiguration.fetch_keepalive,\n      });\n    } else {\n      this.#httpClient = httpClient;\n    }\n  }\n\n  /**\n   * @returns the last transaction time seen by this client, or undefined if this client has not seen a transaction time.\n   */\n  get lastTxnTs(): number | undefined {\n    return this.#lastTxnTs;\n  }\n  /**\n   * Sets the last transaction time of this client.\n   * @param ts - the last transaction timestamp to set, as microseconds since\n   *   the epoch. If `ts` is less than the existing `#lastTxnTs` value or is\n   *   undefined , then no change is made.\n   */\n  set lastTxnTs(ts: number | undefined) {\n    if (ts !== undefined) {\n      this.#lastTxnTs = this.#lastTxnTs ? Math.max(ts, this.#lastTxnTs) : ts;\n    }\n  }\n\n  /**\n   * Return the {@link ClientConfiguration} of this client.\n   */\n  get clientConfiguration(): ClientConfiguration {\n    const { ...copy } = this.#clientConfiguration;\n    return copy;\n  }\n\n  /**\n   * Closes the underlying HTTP client. Subsquent query or close calls\n   * will fail.\n   */\n  close() {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. You cannot close it again.\"\n      );\n    }\n    this.#httpClient.close();\n    this.#isClosed = true;\n  }\n\n  /**\n   * Creates an iterator to yield pages of data. If additional pages exist, the\n   * iterator will lazily fetch addition pages on each iteration. Pages will\n   * be retried in the event of a ThrottlingError up to the client's configured\n   * max_attempts, inclusive of the initial call.\n   *\n   * @typeParam T - The expected type of the items returned from Fauna on each\n   * iteration\n   * @param iterable - a {@link Query} or an existing fauna Set ({@link Page} or\n   * {@link EmbeddedSet})\n   * @param options - a {@link QueryOptions} to apply to the queries. Optional.\n   * @returns A {@link SetIterator} that lazily fetches new pages of data on\n   * each iteration\n   *\n   * @example\n   * ```javascript\n   *  const userIterator = await client.paginate(fql`\n   *    Users.all()\n   *  `);\n   *\n   *  for await (const users of userIterator) {\n   *    for (const user of users) {\n   *      // do something with each user\n   *    }\n   *  }\n   * ```\n   *\n   * @example\n   * The {@link SetIterator.flatten} method can be used so the iterator yields\n   * items directly. Each item is fetched asynchronously and hides when\n   * additional pages are fetched.\n   *\n   * ```javascript\n   *  const userIterator = await client.paginate(fql`\n   *    Users.all()\n   *  `);\n   *\n   *  for await (const user of userIterator.flatten()) {\n   *    // do something with each user\n   *  }\n   * ```\n   */\n  paginate<T extends QueryValue>(\n    iterable: Page<T> | EmbeddedSet | Query,\n    options?: QueryOptions\n  ): SetIterator<T> {\n    if (iterable instanceof Query) {\n      return SetIterator.fromQuery(this, iterable, options);\n    }\n    return SetIterator.fromPageable(this, iterable, options) as SetIterator<T>;\n  }\n\n  /**\n   * Queries Fauna. Queries will be retried in the event of a ThrottlingError up to the client's configured\n   * max_attempts, inclusive of the initial call.\n   *\n   * @typeParam T - The expected type of the response from Fauna\n   * @param query - a {@link Query} to execute in Fauna.\n   *  Note, you can embed header fields in this object; if you do that there's no need to\n   *  pass the headers parameter.\n   * @param options - optional {@link QueryOptions} to apply on top of the request input.\n   *   Values in this headers parameter take precedence over the same values in the {@link ClientConfiguration}.\n   * @returns Promise&lt;{@link QuerySuccess}&gt;.\n   *\n   * @throws {@link ServiceError} Fauna emitted an error. The ServiceError will be\n   *   one of ServiceError's child classes if the error can be further categorized,\n   *   or a concrete ServiceError if it cannot. ServiceError child types are\n   *   {@link AuthenticaionError}, {@link AuthorizationError}, {@link QueryCheckError}\n   *   {@link QueryRuntimeError}, {@link QueryTimeoutError}, {@link ServiceInternalError}\n   *   {@link ServiceTimeoutError}, {@link ThrottlingError}.\n   *   You can use either the type, or the underlying httpStatus + code to determine\n   *   the root cause.\n   * @throws {@link ProtocolError} the client a HTTP error not sent by Fauna.\n   * @throws {@link NetworkError} the client encountered a network issue\n   * connecting to Fauna.\n   * @throws A {@link ClientError} the client fails to submit the request\n   * @throws {@link ClientClosedError} if a query is issued after the client is closed.\n   * due to an internal error.\n   */\n  async query<T extends QueryValue>(\n    query: Query,\n    options?: QueryOptions\n  ): Promise<QuerySuccess<T>> {\n    if (this.#isClosed) {\n      throw new ClientClosedError(\n        \"Your client is closed. No further requests can be issued.\"\n      );\n    }\n\n    // QueryInterpolation values must always be encoded.\n    // TODO: The Query implementation never set the QueryRequest arguments.\n    //   When we separate query building from query encoding we should be able\n    //   to simply do `const queryInterpolation: TaggedTypeFormat.encode(query)`\n    const queryInterpolation = query.toQuery(options).query;\n\n    return this.#queryWithRetries(queryInterpolation, options);\n  }\n\n  async #queryWithRetries<T extends QueryValue>(\n    queryInterpolation: string | QueryInterpolation,\n    options?: QueryOptions,\n    attempt = 0\n  ): Promise<QuerySuccess<T>> {\n    const maxBackoff =\n      this.clientConfiguration.max_backoff ?? DEFAULT_CLIENT_CONFIG.max_backoff;\n    const maxAttempts =\n      this.clientConfiguration.max_attempts ??\n      DEFAULT_CLIENT_CONFIG.max_attempts;\n    const backoffMs =\n      Math.min(Math.random() * 2 ** attempt, maxBackoff) * 1_000;\n\n    const wait = (ms: number) => new Promise((r) => setTimeout(r, ms));\n    attempt += 1;\n    return this.#query<T>(queryInterpolation, options, attempt).catch((e) => {\n      if (e instanceof ThrottlingError && attempt < maxAttempts) {\n        return wait(backoffMs).then(() =>\n          this.#queryWithRetries<T>(queryInterpolation, options, attempt)\n        );\n      }\n      throw e;\n    });\n  }\n\n  #getError(e: any): ClientError | NetworkError | ProtocolError | ServiceError {\n    // the error was already handled by the driver\n    if (\n      e instanceof ClientError ||\n      e instanceof NetworkError ||\n      e instanceof ProtocolError ||\n      e instanceof ServiceError\n    ) {\n      return e;\n    }\n\n    // the HTTP request succeeded, but there was an error\n    if (isHTTPResponse(e)) {\n      // we got an error from the fauna service\n      if (isQueryFailure(e.body)) {\n        const failure = e.body;\n        const status = e.status;\n        return this.#getServiceError(failure, status);\n      }\n\n      // we got a different error from the protocol layer\n      return new ProtocolError({\n        message: `Response is in an unkown format: ${e.body}`,\n        httpStatus: e.status,\n      });\n    }\n\n    // unknown error\n    return new ClientError(\n      \"A client level error occurred. Fauna was not called.\",\n      {\n        cause: e,\n      }\n    );\n  }\n\n  #getSecret(partialClientConfig?: ClientConfiguration): string {\n    let env_secret = undefined;\n    if (\n      typeof process !== \"undefined\" &&\n      process &&\n      typeof process === \"object\" &&\n      process.env &&\n      typeof process.env === \"object\"\n    ) {\n      env_secret = process.env[\"FAUNA_SECRET\"];\n    }\n\n    const maybeSecret = partialClientConfig?.secret ?? env_secret;\n    if (maybeSecret === undefined) {\n      throw new TypeError(\n        \"You must provide a secret to the driver. Set it \\\nin an environmental variable named FAUNA_SECRET or pass it to the Client\\\n constructor.\"\n      );\n    }\n    return maybeSecret;\n  }\n\n  #getEndpoint(partialClientConfig?: ClientConfiguration): URL {\n    // If the user explicitly sets the endpoint to undefined, we should throw a\n    // TypeError, rather than override with the default endpoint.\n    if (\n      partialClientConfig &&\n      \"endpoint\" in partialClientConfig &&\n      partialClientConfig.endpoint === undefined\n    ) {\n      throw new TypeError(\n        `ClientConfiguration option endpoint must be defined.`\n      );\n    }\n\n    let env_endpoint: URL | undefined = undefined;\n    if (\n      typeof process !== \"undefined\" &&\n      process &&\n      typeof process === \"object\" &&\n      process.env &&\n      typeof process.env === \"object\"\n    ) {\n      env_endpoint = process.env[\"FAUNA_ENDPOINT\"]\n        ? new URL(process.env[\"FAUNA_ENDPOINT\"])\n        : undefined;\n    }\n\n    return partialClientConfig?.endpoint ?? env_endpoint ?? endpoints.default;\n  }\n\n  #getServiceError(failure: QueryFailure, httpStatus: number): ServiceError {\n    switch (httpStatus) {\n      case 400:\n        if (QUERY_CHECK_FAILURE_CODES.includes(failure.error.code)) {\n          return new QueryCheckError(failure, httpStatus);\n        }\n        if (failure.error.code === \"invalid_request\") {\n          return new InvalidRequestError(failure, httpStatus);\n        }\n        if (\n          failure.error.code === \"abort\" &&\n          failure.error.abort !== undefined\n        ) {\n          return new AbortError(\n            failure as QueryFailure & { error: { abort: QueryValue } },\n            httpStatus\n          );\n        }\n        return new QueryRuntimeError(failure, httpStatus);\n      case 401:\n        return new AuthenticationError(failure, httpStatus);\n      case 403:\n        return new AuthorizationError(failure, httpStatus);\n      case 409:\n        return new ContendedTransactionError(failure, httpStatus);\n      case 429:\n        return new ThrottlingError(failure, httpStatus);\n      case 440:\n        return new QueryTimeoutError(failure, httpStatus);\n      case 500:\n        return new ServiceInternalError(failure, httpStatus);\n      case 503:\n        return new ServiceTimeoutError(failure, httpStatus);\n      default:\n        return new ServiceError(failure, httpStatus);\n    }\n  }\n\n  async #query<T extends QueryValue>(\n    queryInterpolation: string | QueryInterpolation,\n    options?: QueryOptions,\n    attempt = 0\n  ): Promise<QuerySuccess<T>> {\n    try {\n      const requestConfig = {\n        ...this.#clientConfiguration,\n        ...options,\n      };\n\n      const headers = {\n        Authorization: `Bearer ${requestConfig.secret}`,\n      };\n      this.#setHeaders(requestConfig, headers);\n\n      const isTaggedFormat = requestConfig.format === \"tagged\";\n\n      const queryArgs = requestConfig.arguments\n        ? isTaggedFormat\n          ? TaggedTypeFormat.encode(requestConfig.arguments)\n          : requestConfig.arguments\n        : undefined;\n\n      const requestData = {\n        query: queryInterpolation,\n        arguments: queryArgs,\n      };\n\n      const client_timeout_ms =\n        requestConfig.query_timeout_ms +\n        this.#clientConfiguration.client_timeout_buffer_ms;\n\n      const response = await this.#httpClient.request({\n        client_timeout_ms,\n        data: requestData,\n        headers,\n        method: \"POST\",\n      });\n\n      let parsedResponse;\n      try {\n        parsedResponse = {\n          ...response,\n          body: isTaggedFormat\n            ? TaggedTypeFormat.decode(response.body, {\n                long_type: requestConfig.long_type,\n              })\n            : JSON.parse(response.body),\n        };\n        if (parsedResponse.body.query_tags) {\n          const tags_array = (parsedResponse.body.query_tags as string)\n            .split(\",\")\n            .map((tag) => tag.split(\"=\"));\n          parsedResponse.body.query_tags = Object.fromEntries(tags_array);\n        }\n      } catch (error: unknown) {\n        throw new ProtocolError({\n          message: `Error parsing response as JSON: ${error}`,\n          httpStatus: response.status,\n        });\n      }\n\n      // Response is not from Fauna\n      if (!isQuerySuccess(parsedResponse.body)) {\n        throw this.#getError(parsedResponse);\n      }\n\n      const txn_ts = parsedResponse.body.txn_ts;\n      if (\n        (this.#lastTxnTs === undefined && txn_ts !== undefined) ||\n        (txn_ts !== undefined &&\n          this.#lastTxnTs !== undefined &&\n          this.#lastTxnTs < txn_ts)\n      ) {\n        this.#lastTxnTs = txn_ts;\n      }\n\n      const res = parsedResponse.body as QuerySuccess<T>;\n      if (res.stats) {\n        res.stats.attempts = attempt;\n      }\n      return res;\n    } catch (e: any) {\n      throw this.#getError(e);\n    }\n  }\n\n  #setHeaders(\n    fromObject: QueryOptions,\n    headerObject: Record<string, string | number>\n  ): void {\n    for (const entry of Object.entries(fromObject)) {\n      if (\n        [\n          \"format\",\n          \"query_timeout_ms\",\n          \"linearized\",\n          \"max_contention_retries\",\n          \"traceparent\",\n          \"typecheck\",\n          \"query_tags\",\n        ].includes(entry[0])\n      ) {\n        let headerValue: string;\n        let headerKey = `x-${entry[0].replaceAll(\"_\", \"-\")}`;\n        if (\"query_tags\" === entry[0]) {\n          headerValue = Object.entries(entry[1])\n            .map((tag) => tag.join(\"=\"))\n            .join(\",\");\n        } else {\n          if (typeof entry[1] === \"string\") {\n            headerValue = entry[1];\n          } else {\n            headerValue = String(entry[1]);\n          }\n        }\n        if (\"traceparent\" === entry[0]) {\n          headerKey = entry[0];\n        }\n        headerObject[headerKey] = headerValue;\n      }\n    }\n    if (\n      headerObject[\"x-last-txn-ts\"] === undefined &&\n      this.#lastTxnTs !== undefined\n    ) {\n      headerObject[\"x-last-txn-ts\"] = this.#lastTxnTs;\n    }\n\n    headerObject[\"x-driver-env\"] = Client.#driverEnvHeader;\n  }\n\n  #validateConfiguration() {\n    const config = this.#clientConfiguration;\n\n    const required_options: (keyof RequiredClientConfig)[] = [\n      \"client_timeout_buffer_ms\",\n      \"endpoint\",\n      \"format\",\n      \"http2_session_idle_ms\",\n      \"long_type\",\n      \"query_timeout_ms\",\n      \"fetch_keepalive\",\n      \"http2_max_streams\",\n    ];\n    required_options.forEach((option) => {\n      if (config[option] === undefined) {\n        throw new TypeError(\n          `ClientConfiguration option '${option}' must be defined.`\n        );\n      }\n    });\n\n    if (config.http2_max_streams <= 0) {\n      throw new RangeError(`'http2_max_streams' must be greater than zero.`);\n    }\n\n    if (config.client_timeout_buffer_ms <= 0) {\n      throw new RangeError(\n        `'client_timeout_buffer_ms' must be greater than zero.`\n      );\n    }\n\n    if (config.query_timeout_ms <= 0) {\n      throw new RangeError(`'query_timeout_ms' must be greater than zero.`);\n    }\n  }\n}\n\n// Private types and constants for internal logic.\n\nconst QUERY_CHECK_FAILURE_CODES = [\n  \"invalid_function_definition\",\n  \"invalid_identifier\",\n  \"invalid_query\",\n  \"invalid_syntax\",\n  \"invalid_type\",\n];\n"],
  "mappings": "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",
  "names": ["endpoints", "FaunaError", "args", "ServiceError", "failure", "httpStatus", "info", "QueryRuntimeError", "QueryCheckError", "InvalidRequestError", "AbortError", "AuthenticationError", "AuthorizationError", "ContendedTransactionError", "ThrottlingError", "QueryTimeoutError", "ServiceInternalError", "ServiceTimeoutError", "ClientError", "message", "options", "ClientClosedError", "NetworkError", "ProtocolError", "error", "FetchClient", "#url", "#keepalive", "url", "fetch_keepalive", "data", "requestHeaders", "method", "client_timeout_ms", "signal", "controller", "response", "error", "NetworkError", "status", "responseHeaders", "value", "key", "body", "http2", "_clients", "_http2_session_idle_ms", "_http2_max_streams", "_url", "_numberOfUsers", "_session", "_getClientKey", "getClientKey_fn", "_closeForAll", "closeForAll_fn", "_connect", "connect_fn", "_doRequest", "doRequest_fn", "_NodeHTTP2Client", "http2_session_idle_ms", "url", "http2_max_streams", "__privateAdd", "__privateSet", "httpClientOptions", "_a", "clientKey", "__privateMethod", "__privateGet", "client", "__privateWrapper", "req", "retryCount", "memoizedError", "error", "NetworkError", "NodeHTTP2Client", "new_session", "client_timeout_ms", "requestData", "requestHeaders", "method", "resolvePromise", "rejectPromise", "onResponse", "http2ResponseHeaders", "status", "responseData", "chunk", "httpRequestHeaders", "getDefaultHTTPClient", "options", "nodeHttp2IsSupported", "NodeHTTP2Client", "FetchClient", "isHTTPResponse", "res", "yearpart", "monthpart", "daypart", "hourpart", "minsecpart", "decimalpart", "datesplit", "timesplit", "zonesplit", "plaindate", "startsWithPlaindate", "datetime", "TimeStub", "isoString", "datetime", "date", "DateStub", "dateString", "matches", "plaindate", "startsWithPlaindate", "ClientError", "DocumentReference", "coll", "id", "Module", "Document", "obj", "ts", "rest", "NamedDocumentReference", "name", "NamedDocument", "data", "NullDocument", "ref", "cause", "Page", "data", "after", "EmbeddedSet", "SetIterator", "#generator", "client", "initial", "options", "generateFromThunk", "generatePages", "query", "pageable", "FlattenedSetIterator", "setIterator", "generateItems", "currentPage", "fql", "thunk", "result", "page", "item", "TaggedTypeFormat", "obj", "encode", "input", "decodeOptions", "_", "value", "Module", "modName", "id", "DocumentReference", "Document", "NamedDocument", "ref", "NamedDocumentReference", "NullDocument", "EmbeddedSet", "Page", "bigInt", "DateStub", "TimeStub", "LONG_MIN", "LONG_MAX", "INT_MIN", "INT_MAX", "encodeMap", "wrapped", "_out", "k", "i", "dateValue", "ClientError", "fql", "queryFragments", "queryArgs", "Query", "#queryFragments", "#queryArgs", "requestHeaders", "#render", "resultArgs", "fragment", "i", "arg", "subQuery", "request", "TaggedTypeFormat", "x", "packageVersion", "os", "getDriverEnv", "driverEnv", "packageVersion", "isNode", "isBrowser", "isServiceWorker", "getNodeRuntimeEnv", "getBrowserDetails", "getBrowserOsDetails", "_", "val", "entry", "navigator", "browser", "browserVersion", "nameOffset", "verOffset", "ix", "clientStrings", "id", "cs", "osVersion", "matches", "crossGlobal", "detectedEnv", "env", "isQuerySuccess", "res", "isQueryFailure", "DEFAULT_CLIENT_CONFIG", "_driverEnvHeader", "_clientConfiguration", "_httpClient", "_lastTxnTs", "_isClosed", "_queryWithRetries", "queryWithRetries_fn", "_getError", "getError_fn", "_getSecret", "getSecret_fn", "_getEndpoint", "getEndpoint_fn", "_getServiceError", "getServiceError_fn", "_query", "query_fn", "_setHeaders", "setHeaders_fn", "_validateConfiguration", "validateConfiguration_fn", "_Client", "clientConfiguration", "httpClient", "__privateAdd", "__privateSet", "__privateMethod", "getDefaultHTTPClient", "__privateGet", "ts", "copy", "ClientClosedError", "iterable", "options", "Query", "SetIterator", "query", "queryInterpolation", "Client", "attempt", "maxBackoff", "maxAttempts", "backoffMs", "wait", "ms", "r", "e", "ThrottlingError", "ClientError", "NetworkError", "ProtocolError", "ServiceError", "isHTTPResponse", "isQueryFailure", "failure", "status", "partialClientConfig", "env_secret", "maybeSecret", "env_endpoint", "endpoints", "httpStatus", "QUERY_CHECK_FAILURE_CODES", "QueryCheckError", "InvalidRequestError", "AbortError", "QueryRuntimeError", "AuthenticationError", "AuthorizationError", "ContendedTransactionError", "QueryTimeoutError", "ServiceInternalError", "ServiceTimeoutError", "requestConfig", "headers", "isTaggedFormat", "queryArgs", "TaggedTypeFormat", "requestData", "client_timeout_ms", "response", "parsedResponse", "tags_array", "tag", "error", "isQuerySuccess", "txn_ts", "res", "fromObject", "headerObject", "entry", "headerValue", "headerKey", "config", "option", "getDriverEnv"]
}
